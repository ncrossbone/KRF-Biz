<?xml version="1.0" encoding="UTF-8" ?>
<!--
       Copyright 2015-2016 the original author or authors.
       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at
          http://www.apache.org/licenses/LICENSE-2.0
       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ce.krf.biz.mapper.SearchResultMapper">
    <select id="searchResult_A" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
  SELECT /* KRF-BIZ.SearchResultMapper.searchResult_A */
         RN,
         PT_NO,
         PT_NM,
         WMCYMD,
         WMYR,
         WMOD,
         WMWK,
         WMDEP,
         CURR_BOD,
         CURR_DO,
         CURR_COD,
         CURR_TN,
         CURR_TP,
         CURR_TEMP,
         CURR_PH,
         CURR_SS,
         CURR_SS_NEW,
         CURR_CLOA,
         CURR_TOC,
         CURR_AMNT,
         CURR_DTN,
         CURR_NO3N,
         CURR_NH3N,
         CURR_DTP,
         CURR_POP,
         CURR_TRANS,
         CURR_ALGOL,
         CURR_TCOLI,
         CURR_ECOLI,
         CURR_ANTIMON,
         CURR_PHENOL,
         CURR_COL,
         CURR_NHEX,
         CURR_MN,
         CURR_FE,
         CURR_CD,
         CURR_CN,
         CURR_PB,
         CURR_CR6,
         CURR_CR,
         CURR_AS,
         CURR_HG,
         CURR_CU,
         CURR_ZN,
         CURR_FL,
         CURR_ABS,
         CURR_CL,
         CURR_TCE,
         CURR_PCE,
         CURR_CCL4,
         CURR_DCETH,
         CURR_DCM,
         CURR_BENZENE,
         CURR_CHCL3,
         CURR_OP,
         CURR_PCB,
         CURR_DEHP,
         CURR_DIOX,
         CURR_HCHO,
         CURR_HCB,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BOD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_BOD,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DO) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_DO,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_COD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_COD,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_TN,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_TP,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TEMP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_TEMP,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PH) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_PH,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_SS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_SS,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CLOA) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CLOA,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TOC) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_TOC,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_AMNT) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_AMNT,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DTN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_DTN,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_NO3N) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_NO3N,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_NH3N) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_NH3N,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DTP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_DTP,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_POP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_POP,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TRANS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_TRANS,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ALGOL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_ALGOL,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TCOLI) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_TCOLI,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ECOLI) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_ECOLI,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ANTIMON) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_ANTIMON,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PHENOL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_PHENOL,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_COL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_COL,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_NHEX) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_NHEX,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_MN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_MN,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_FE,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CD,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CN,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PB) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_PB,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CR6) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CR6,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CR) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CR,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_AS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_AS,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_HG) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_HG,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CU) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CU,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ZN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_ZN,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_FL,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ABS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_ABS,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CL,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TCE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_TCE,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PCE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_PCE,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CCL4) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CCL4,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DCETH) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_DCETH,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DCM) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_DCM,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BENZENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_BENZENE,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CHCL3) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_CHCL3,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_OP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_OP,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PCB) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_PCB,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DEHP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_DEHP,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DIOX) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_DIOX,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_HCHO) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_HCHO,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_HCB) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_HCB,
		'['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN3 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DO) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_DO
    FROM (SELECT CASE
                    WHEN SUBSTR (A.WMWK, -1) = '차'
                    THEN
                       A.RN
                    WHEN SUBSTR (A.WMWK, -1) = '부'
                    THEN
                       RANK ()
                          OVER (PARTITION BY SUBSTR (A.PT_NO, 1, 7)
                                ORDER BY A.WMYR, A.WMOD DESC, A.WMWK)
                    ELSE
                       A.RN
                 END
                    AS RN,
                 B.RN AS RN_2,
                 SUBSTR (A.PT_NO, 1, 7) AS PT_NO,
                 A.PT_NM,
                 A.WMCYMD,
                 B.WMCYMD AS CHART_DATE,
                 A.WMYR,
                 A.WMOD,
                 A.WMWK,
                 A.WMDEP,
                 NVL (A.ITEM_BOD, 888888888) AS CURR_BOD,
                 CASE WHEN B.ITEM_BOD = '999999999' THEN 0 ELSE B.ITEM_BOD END
                    AS CHART_BOD,
                 NVL (A.ITEM_DOC, 888888888) AS CURR_DO,
                 CASE WHEN B.ITEM_DOC = '999999999' THEN 0 ELSE B.ITEM_DOC END
                    AS CHART_DO,
                 NVL (A.ITEM_COD, 888888888) AS CURR_COD,
                 CASE WHEN B.ITEM_COD = '999999999' THEN 0 ELSE B.ITEM_COD END
                    AS CHART_COD,
                 NVL (A.ITEM_TN, 888888888) AS CURR_TN,
                 CASE WHEN B.ITEM_TN = '999999999' THEN 0 ELSE B.ITEM_TN END
                    AS CHART_TN,
                 NVL (A.ITEM_TP, 888888888) AS CURR_TP,
                 CASE WHEN B.ITEM_TP = '999999999' THEN 0 ELSE B.ITEM_TP END
                    AS CHART_TP,
                 NVL (A.ITEM_TEMP, 888888888) AS CURR_TEMP,
                 CASE
                    WHEN B.ITEM_TEMP = '999999999' THEN 0
                    ELSE B.ITEM_TEMP
                 END
                    AS CHART_TEMP,
                 NVL (A.ITEM_PH, 888888888) AS CURR_PH,
                 CASE WHEN B.ITEM_PH = '999999999' THEN 0 ELSE B.ITEM_PH END
                    AS CHART_PH,
                 NVL (A.ITEM_SS, 888888888) AS CURR_SS,
                 CASE
                    WHEN B.ITEM_SS = 999999999 THEN '정량한계미만'
                    ELSE NULL
                 END
                    CURR_SS_NEW,
                 CASE WHEN B.ITEM_SS = '999999999' THEN 0 ELSE B.ITEM_SS END
                    AS CHART_SS,
                 NVL (A.ITEM_CLOA, 888888888) AS CURR_CLOA,
                 CASE
                    WHEN B.ITEM_CLOA = '999999999' THEN 0
                    ELSE B.ITEM_CLOA
                 END
                    AS CHART_CLOA,
                 NVL (A.ITEM_TOC, 888888888) AS CURR_TOC,
                 CASE WHEN B.ITEM_TOC = '999999999' THEN 0 ELSE B.ITEM_TOC END
                    AS CHART_TOC,
                 NVL (A.ITEM_AMNT, 888888888) AS CURR_AMNT,
                 CASE
                    WHEN B.ITEM_AMNT = '999999999' THEN 0
                    ELSE B.ITEM_AMNT
                 END
                    AS CHART_AMNT,
                 NVL (A.ITEM_DTN, 888888888) AS CURR_DTN,
                 CASE WHEN B.ITEM_DTN = '999999999' THEN 0 ELSE B.ITEM_DTN END
                    AS CHART_DTN,
                 NVL (A.ITEM_NO3N, 888888888) AS CURR_NO3N,
                 CASE
                    WHEN B.ITEM_NO3N = '999999999' THEN 0
                    ELSE B.ITEM_NO3N
                 END
                    AS CHART_NO3N,
                 NVL (A.ITEM_NH3N, 888888888) AS CURR_NH3N,
                 CASE
                    WHEN B.ITEM_NH3N = '999999999' THEN 0
                    ELSE B.ITEM_NH3N
                 END
                    AS CHART_NH3N,
                 NVL (A.ITEM_DTP, 888888888) AS CURR_DTP,
                 CASE WHEN B.ITEM_DTP = '999999999' THEN 0 ELSE B.ITEM_DTP END
                    AS CHART_DTP,
                 NVL (A.ITEM_POP, 888888888) AS CURR_POP,
                 CASE WHEN B.ITEM_POP = '999999999' THEN 0 ELSE B.ITEM_POP END
                    AS CHART_POP,
                 NVL (A.ITEM_TRANS, 888888888) AS CURR_TRANS,
                 CASE
                    WHEN B.ITEM_TRANS = '999999999' THEN 0
                    ELSE B.ITEM_TRANS
                 END
                    AS CHART_TRANS,
                 NVL (A.ITEM_ALGOL, 888888888) AS CURR_ALGOL,
                 CASE
                    WHEN B.ITEM_ALGOL = '999999999' THEN 0
                    ELSE B.ITEM_ALGOL
                 END
                    AS CHART_ALGOL,
                 NVL (A.ITEM_TCOLI, 888888888) AS CURR_TCOLI,
                 CASE
                    WHEN B.ITEM_TCOLI = '999999999' THEN 0
                    ELSE B.ITEM_TCOLI
                 END
                    AS CHART_TCOLI,
                 NVL (A.ITEM_ECOLI, 888888888) AS CURR_ECOLI,
                 CASE
                    WHEN B.ITEM_ECOLI = '999999999' THEN 0
                    ELSE B.ITEM_ECOLI
                 END
                    AS CHART_ECOLI,
                 NVL (A.ITEM_ANTIMON, 888888888) AS CURR_ANTIMON,
                 CASE
                    WHEN B.ITEM_ANTIMON = '999999999' THEN 0
                    ELSE B.ITEM_ANTIMON
                 END
                    AS CHART_ANTIMON,
                 NVL (A.ITEM_PHENOL, 888888888) AS CURR_PHENOL,
                 CASE
                    WHEN B.ITEM_PHENOL = '999999999' THEN 0
                    ELSE B.ITEM_PHENOL
                 END
                    AS CHART_PHENOL,
                 NVL (A.ITEM_COL, 888888888) AS CURR_COL,
                 CASE WHEN B.ITEM_COL = '999999999' THEN 0 ELSE B.ITEM_COL END
                    AS CHART_COL,
                 NVL (A.ITEM_NHEX, 888888888) AS CURR_NHEX,
                 CASE
                    WHEN B.ITEM_NHEX = '999999999' THEN 0
                    ELSE B.ITEM_NHEX
                 END
                    AS CHART_NHEX,
                 NVL (A.ITEM_MN, 888888888) AS CURR_MN,
                 CASE WHEN B.ITEM_MN = '999999999' THEN 0 ELSE B.ITEM_MN END
                    AS CHART_MN,
                 NVL (A.ITEM_FE, 888888888) AS CURR_FE,
                 CASE WHEN B.ITEM_FE = '999999999' THEN 0 ELSE B.ITEM_FE END
                    AS CHART_FE,
                 NVL (A.ITEM_CD, 888888888) AS CURR_CD,
                 CASE WHEN B.ITEM_CD = '999999999' THEN 0 ELSE B.ITEM_CD END
                    AS CHART_CD,
                 NVL (A.ITEM_CN, 888888888) AS CURR_CN,
                 CASE WHEN B.ITEM_CN = '999999999' THEN 0 ELSE B.ITEM_CN END
                    AS CHART_CN,
                 NVL (A.ITEM_PB, 888888888) AS CURR_PB,
                 CASE WHEN B.ITEM_PB = '999999999' THEN 0 ELSE B.ITEM_PB END
                    AS CHART_PB,
                 NVL (A.ITEM_CR6, 888888888) AS CURR_CR6,
                 CASE WHEN B.ITEM_CR6 = '999999999' THEN 0 ELSE B.ITEM_CR6 END
                    AS CHART_CR6,
                 NVL (A.ITEM_CR, 888888888) AS CURR_CR,
                 CASE WHEN B.ITEM_CR = '999999999' THEN 0 ELSE B.ITEM_CR END
                    AS CHART_CR,
                 NVL (A.ITEM_AS, 888888888) AS CURR_AS,
                 CASE WHEN B.ITEM_AS = '999999999' THEN 0 ELSE B.ITEM_AS END
                    AS CHART_AS,
                 NVL (A.ITEM_HG, 888888888) AS CURR_HG,
                 CASE WHEN B.ITEM_HG = '999999999' THEN 0 ELSE B.ITEM_HG END
                    AS CHART_HG,
                 NVL (A.ITEM_CU, 888888888) AS CURR_CU,
                 CASE WHEN B.ITEM_CU = '999999999' THEN 0 ELSE B.ITEM_CU END
                    AS CHART_CU,
                 NVL (A.ITEM_ZN, 888888888) AS CURR_ZN,
                 CASE WHEN B.ITEM_ZN = '999999999' THEN 0 ELSE B.ITEM_ZN END
                    AS CHART_ZN,
                 NVL (A.ITEM_FL, 888888888) AS CURR_FL,
                 CASE WHEN B.ITEM_FL = '999999999' THEN 0 ELSE B.ITEM_FL END
                    AS CHART_FL,
                 NVL (A.ITEM_ABS, 888888888) AS CURR_ABS,
                 CASE WHEN B.ITEM_ABS = '999999999' THEN 0 ELSE B.ITEM_ABS END
                    AS CHART_ABS,
                 NVL (A.ITEM_CL, 888888888) AS CURR_CL,
                 CASE WHEN B.ITEM_CL = '999999999' THEN 0 ELSE B.ITEM_CL END
                    AS CHART_CL,
                 NVL (A.ITEM_TCE, 888888888) AS CURR_TCE,
                 CASE WHEN B.ITEM_TCE = '999999999' THEN 0 ELSE B.ITEM_TCE END
                    AS CHART_TCE,
                 NVL (A.ITEM_PCE, 888888888) AS CURR_PCE,
                 CASE WHEN B.ITEM_PCE = '999999999' THEN 0 ELSE B.ITEM_PCE END
                    AS CHART_PCE,
                 NVL (A.ITEM_CCL4, 888888888) AS CURR_CCL4,
                 CASE
                    WHEN B.ITEM_CCL4 = '999999999' THEN 0
                    ELSE B.ITEM_CCL4
                 END
                    AS CHART_CCL4,
                 NVL (A.ITEM_DCETH, 888888888) AS CURR_DCETH,
                 CASE
                    WHEN B.ITEM_DCETH = '999999999' THEN 0
                    ELSE B.ITEM_DCETH
                 END
                    AS CHART_DCETH,
                 NVL (A.ITEM_DCM, 888888888) AS CURR_DCM,
                 CASE WHEN B.ITEM_DCM = '999999999' THEN 0 ELSE B.ITEM_DCM END
                    AS CHART_DCM,
                 NVL (A.ITEM_BENZENE, 888888888) AS CURR_BENZENE,
                 CASE
                    WHEN B.ITEM_BENZENE = '999999999' THEN 0
                    ELSE B.ITEM_BENZENE
                 END
                    AS CHART_BENZENE,
                 NVL (A.ITEM_CHCL3, 888888888) AS CURR_CHCL3,
                 CASE
                    WHEN B.ITEM_CHCL3 = '999999999' THEN 0
                    ELSE B.ITEM_CHCL3
                 END
                    AS CHART_CHCL3,
                 NVL (A.ITEM_OP, 888888888) AS CURR_OP,
                 CASE WHEN B.ITEM_OP = '999999999' THEN 0 ELSE B.ITEM_OP END
                    AS CHART_OP,
                 NVL (A.ITEM_PCB, 888888888) AS CURR_PCB,
                 CASE WHEN B.ITEM_PCB = '999999999' THEN 0 ELSE B.ITEM_PCB END
                    AS CHART_PCB,
                 NVL (A.ITEM_DEHP, 888888888) AS CURR_DEHP,
                 CASE
                    WHEN B.ITEM_DEHP = '999999999' THEN 0
                    ELSE B.ITEM_DEHP
                 END
                    AS CHART_DEHP,
                 NVL (A.ITEM_DIOX, 888888888) AS CURR_DIOX,
                 CASE
                    WHEN B.ITEM_DIOX = '999999999' THEN 0
                    ELSE B.ITEM_DIOX
                 END
                    AS CHART_DIOX,
                 NVL (A.ITEM_HCHO, 888888888) AS CURR_HCHO,
                 CASE
                    WHEN B.ITEM_HCHO = '999999999' THEN 0
                    ELSE B.ITEM_HCHO
                 END
                    AS CHART_HCHO,
                 NVL (A.ITEM_HCB, 888888888) AS CURR_HCB,
                 CASE WHEN B.ITEM_HCB = '999999999' THEN 0 ELSE B.ITEM_HCB END
                    AS CHART_HCB,
                 RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY B.WMCYMD ASC) AS RN3 
            FROM (                    SELECT RANK ()
                                                OVER (PARTITION BY A.PT_NO || SUBSTR (C.WMWK, -1)
                                                      ORDER BY A.PT_NO, C.WMCYMD DESC, C.WMWK DESC)
                                                RN                    /* 순번 */
                                                  ,
                                             A.PT_NO || SUBSTR (C.WMWK, -1) AS PT_NO /* 지점코드 */
                                                                                    ,
                                             A.PT_NM                 /* 지점명 */
                                                    ,
                                             C.WMCYMD               /* 측정일자 */
                                                     ,
                                             B.WMYR                    /* 년 */
                                                   ,
                                             B.WMOD                    /* 월 */
                                                   ,
                                             CASE
                                                WHEN LENGTH (C.WMWK) = '2'
                                                THEN
                                                   CASE
                                                      WHEN SUBSTR (C.WMWK, -1) = '1'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 상층부'
                                                      WHEN SUBSTR (C.WMWK, -1) = '2'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 중상층부'
                                                      WHEN SUBSTR (C.WMWK, -1) = '3'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 중층부'
                                                      WHEN SUBSTR (C.WMWK, -1) = '4'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 중하층부'
                                                      WHEN SUBSTR (C.WMWK, -1) = '5'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 하층부'
                                                   END
                                                ELSE
                                                   C.WMWK
                                             END
                                                AS WMWK           /* 회차 -수정-*/
                                                       ,
                                             C.WMDEP               /*수심 -추가-*/
                                                    ,
                                             B.ITEM_AMNT              /* 유량 */
                                                        ,
                                             B.ITEM_BOD              /* BOD */
                                                       ,
                                             B.ITEM_DOC               /* DO */
                                                       ,
                                             B.ITEM_COD              /* COD */
                                                       ,
                                             B.ITEM_EC                /* EC */
                                                      ,
                                             B.ITEM_TN               /* T-N */
                                                      ,
                                             B.ITEM_DTN              /* DTN */
                                                       ,
                                             B.ITEM_NO3N            /* NO3N */
                                                        ,
                                             B.ITEM_NH3N            /* NH3N */
                                                        ,
                                             B.ITEM_TP               /* T-P */
                                                      ,
                                             B.ITEM_TEMP              /* 수온 */
                                                        ,
                                             B.ITEM_PH                /* PH */
                                                      ,
                                             B.ITEM_SS                /* SS */
                                                      ,
                                             B.ITEM_DTP              /* DTP */
                                                       ,
                                             B.ITEM_POP              /* POP */
                                                       ,
                                             B.ITEM_CLOA           /* 클로로필A */
                                                        ,
                                             B.ITEM_TOC       /* TOC - 추가 - */
                                                       ,
                                             B.ITEM_TRANS            /* 투명도 */
                                                         ,
                                             B.ITEM_ALGOL             /* 조류 */
                                                         ,
                                             B.ITEM_TCOLI         /* 총대장균군수 */
                                                         ,
                                             B.ITEM_ECOLI       /* 분원성대장균군수 */
                                                         ,
                                             B.ITEM_ANTIMON          /* 안티몬 */
                                                           ,
                                             B.ITEM_PHENOL        /* PHENOL */
                                                          ,
                                             B.ITEM_COL               /* 색도 */
                                                       ,
                                             B.ITEM_NHEX             /* N.H */
                                                        ,
                                             B.ITEM_MN                /* MN */
                                                      ,
                                             B.ITEM_FE                /* FE */
                                                      ,
                                             B.ITEM_CD                /* CD */
                                                      ,
                                             B.ITEM_CN                /* CN */
                                                      ,
                                             B.ITEM_PB                /* PB */
                                                      ,
                                             B.ITEM_CR6              /* CR6 */
                                                       ,
                                             B.ITEM_CR                /* CR */
                                                      ,
                                             B.ITEM_AS                /* AS */
                                                      ,
                                             B.ITEM_HG                /* HG */
                                                      ,
                                             B.ITEM_CU                /* CU */
                                                      ,
                                             B.ITEM_ZN                /* ZN */
                                                      ,
                                             B.ITEM_FL                 /* F */
                                                      ,
                                             B.ITEM_ABS              /* ABS */
                                                       ,
                                             B.ITEM_CL                /* CL */
                                                      ,
                                             B.ITEM_TCE              /* TCE */
                                                       ,
                                             B.ITEM_PCE              /* PCE */
                                                       ,
                                             B.ITEM_CCL4           /* 사염화탄소 */
                                                        ,
                                             B.ITEM_DCETH      /* 1.2디클로로에탄 */
                                                         ,
                                             B.ITEM_DCM           /* 디클로로메탄 */
                                                       ,
                                             B.ITEM_BENZENE           /* 벤젠 */
                                                           ,
                                             B.ITEM_CHCL3          /* 클로로포름 */
                                                         ,
                                             B.ITEM_OP               /* 유기인 */
                                                      ,
                                             B.ITEM_PCB              /* PCB */
                                                       ,
                                             B.ITEM_DEHP            /* DEHP */
                                                        ,
                                             B.ITEM_DIOX /* 1,4-다이옥세인 - 추가 -*/
                                                        ,
                                             B.ITEM_HCHO          /* 포름알데히드 */
                                                        ,
                                             B.ITEM_HCB              /* HCB */
                                                       ,
                                             A.ADMCODE             /* 법정동코드 */
                                        FROM RWMPT A, RWMDTI_NEW B, RWMDTD C
                                       WHERE     A.PT_NO = B.PT_NO
                                             AND A.PT_NO = C.PT_NO
                                             AND B.WMYR = C.WMYR
                                             AND B.WMOD = C.WMOD
                                             AND B.WMWK = C.WMWK
                                             AND B.WMYR || B.WMOD >= #{startYear} || #{startMonth}
                                             AND B.WMYR || B.WMOD <![CDATA[ <=    #{endYear} || #{endMonth} ]]>
                                             AND SUBSTR (A.PT_NO, 1, 7) IN
                                                      <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	
                                             AND C.WMCYMD IS NOT NULL) A,
                 (                    SELECT RANK ()
                                                OVER (PARTITION BY A.PT_NO || SUBSTR (C.WMWK, -1)
                                                      ORDER BY A.PT_NO, C.WMCYMD DESC, C.WMWK DESC)
                                                RN                    /* 순번 */
                                                  ,
                                             A.PT_NO || SUBSTR (C.WMWK, -1) AS PT_NO /* 지점코드 */
                                                                                    ,
                                             A.PT_NM                 /* 지점명 */
                                                    ,
                                             C.WMCYMD               /* 측정일자 */
                                                     ,
                                             B.WMYR                    /* 년 */
                                                   ,
                                             B.WMOD                    /* 월 */
                                                   ,
                                             CASE
                                                WHEN LENGTH (C.WMWK) = '2'
                                                THEN
                                                   CASE
                                                      WHEN SUBSTR (C.WMWK, -1) = '1'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 상층부'
                                                      WHEN SUBSTR (C.WMWK, -1) = '2'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 중상층부'
                                                      WHEN SUBSTR (C.WMWK, -1) = '3'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 중층부'
                                                      WHEN SUBSTR (C.WMWK, -1) = '4'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 중하층부'
                                                      WHEN SUBSTR (C.WMWK, -1) = '5'
                                                      THEN
                                                         SUBSTR (C.WMWK, 1, 1)
                                                         || '회차 하층부'
                                                   END
                                                ELSE
                                                   C.WMWK
                                             END
                                                AS WMWK           /* 회차 -수정-*/
                                                       ,
                                             C.WMDEP               /*수심 -추가-*/
                                                    ,
                                             B.ITEM_AMNT              /* 유량 */
                                                        ,
                                             B.ITEM_BOD              /* BOD */
                                                       ,
                                             B.ITEM_DOC               /* DO */
                                                       ,
                                             B.ITEM_COD              /* COD */
                                                       ,
                                             B.ITEM_EC                /* EC */
                                                      ,
                                             B.ITEM_TN               /* T-N */
                                                      ,
                                             B.ITEM_DTN              /* DTN */
                                                       ,
                                             B.ITEM_NO3N            /* NO3N */
                                                        ,
                                             B.ITEM_NH3N            /* NH3N */
                                                        ,
                                             B.ITEM_TP               /* T-P */
                                                      ,
                                             B.ITEM_TEMP              /* 수온 */
                                                        ,
                                             B.ITEM_PH                /* PH */
                                                      ,
                                             B.ITEM_SS                /* SS */
                                                      ,
                                             B.ITEM_DTP              /* DTP */
                                                       ,
                                             B.ITEM_POP              /* POP */
                                                       ,
                                             B.ITEM_CLOA           /* 클로로필A */
                                                        ,
                                             B.ITEM_TOC       /* TOC - 추가 - */
                                                       ,
                                             B.ITEM_TRANS            /* 투명도 */
                                                         ,
                                             B.ITEM_ALGOL             /* 조류 */
                                                         ,
                                             B.ITEM_TCOLI         /* 총대장균군수 */
                                                         ,
                                             B.ITEM_ECOLI       /* 분원성대장균군수 */
                                                         ,
                                             B.ITEM_ANTIMON          /* 안티몬 */
                                                           ,
                                             B.ITEM_PHENOL        /* PHENOL */
                                                          ,
                                             B.ITEM_COL               /* 색도 */
                                                       ,
                                             B.ITEM_NHEX             /* N.H */
                                                        ,
                                             B.ITEM_MN                /* MN */
                                                      ,
                                             B.ITEM_FE                /* FE */
                                                      ,
                                             B.ITEM_CD                /* CD */
                                                      ,
                                             B.ITEM_CN                /* CN */
                                                      ,
                                             B.ITEM_PB                /* PB */
                                                      ,
                                             B.ITEM_CR6              /* CR6 */
                                                       ,
                                             B.ITEM_CR                /* CR */
                                                      ,
                                             B.ITEM_AS                /* AS */
                                                      ,
                                             B.ITEM_HG                /* HG */
                                                      ,
                                             B.ITEM_CU                /* CU */
                                                      ,
                                             B.ITEM_ZN                /* ZN */
                                                      ,
                                             B.ITEM_FL                 /* F */
                                                      ,
                                             B.ITEM_ABS              /* ABS */
                                                       ,
                                             B.ITEM_CL                /* CL */
                                                      ,
                                             B.ITEM_TCE              /* TCE */
                                                       ,
                                             B.ITEM_PCE              /* PCE */
                                                       ,
                                             B.ITEM_CCL4           /* 사염화탄소 */
                                                        ,
                                             B.ITEM_DCETH      /* 1.2디클로로에탄 */
                                                         ,
                                             B.ITEM_DCM           /* 디클로로메탄 */
                                                       ,
                                             B.ITEM_BENZENE           /* 벤젠 */
                                                           ,
                                             B.ITEM_CHCL3          /* 클로로포름 */
                                                         ,
                                             B.ITEM_OP               /* 유기인 */
                                                      ,
                                             B.ITEM_PCB              /* PCB */
                                                       ,
                                             B.ITEM_DEHP            /* DEHP */
                                                        ,
                                             B.ITEM_DIOX /* 1,4-다이옥세인 - 추가 -*/
                                                        ,
                                             B.ITEM_HCHO          /* 포름알데히드 */
                                                        ,
                                             B.ITEM_HCB              /* HCB */
                                                       ,
                                             A.ADMCODE             /* 법정동코드 */
                                        FROM RWMPT A, RWMDTI_NEW B, RWMDTD C
                                       WHERE     A.PT_NO = B.PT_NO
                                             AND A.PT_NO = C.PT_NO
                                             AND B.WMYR = C.WMYR
                                             AND B.WMOD = C.WMOD
                                             AND B.WMWK = C.WMWK
                                             AND B.WMYR || B.WMOD >=
                                                   TO_CHAR (TO_DATE (#{startYear} || #{startMonth},'YYYYMM')- 360,'YYYYMM')
                                             AND B.WMYR || B.WMOD <![CDATA[ <= #{endYear} || #{endMonth} ]]>
                                             AND SUBSTR (A.PT_NO, 1, 7) IN
                                                      <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	
                                             AND C.WMCYMD IS NOT NULL) B,
                 KESTI_WATER_ALL_MAP C
           WHERE     A.PT_NO = B.PT_NO
                 AND A.ADMCODE = B.ADMCODE
                 AND B.RN BETWEEN A.RN AND A.RN + 8 
                 AND SUBSTR (A.ADMCODE, 1, 10) = C.ADM_CD(+))
	GROUP BY RN,
	         PT_NO,
	         PT_NM,
	         WMCYMD,
	         WMYR,
	         WMOD,
	         WMWK,
	         WMDEP,
	         CURR_BOD,
	         CURR_DO,
	         CURR_COD,
	         CURR_TN,
	         CURR_TP,
	         CURR_TEMP,
	         CURR_PH,
	         CURR_SS,
	         CURR_SS_NEW,
	         CURR_CLOA,
	         CURR_TOC,
	         CURR_AMNT,
	         CURR_DTN,
	         CURR_NO3N,
	         CURR_NH3N,
	         CURR_DTP,
	         CURR_POP,
	         CURR_TRANS,
	         CURR_ALGOL,
	         CURR_TCOLI,
	         CURR_ECOLI,
	         CURR_ANTIMON,
	         CURR_PHENOL,
	         CURR_COL,
	         CURR_NHEX,
	         CURR_MN,
	         CURR_FE,
	         CURR_CD,
	         CURR_CN,
	         CURR_PB,
	         CURR_CR6,
	         CURR_CR,
	         CURR_AS,
	         CURR_HG,
	         CURR_CU,
	         CURR_ZN,
	         CURR_FL,
	         CURR_ABS,
	         CURR_CL,
	         CURR_TCE,
	         CURR_PCE,
	         CURR_CCL4,
	         CURR_DCETH,
	         CURR_DCM,
	         CURR_BENZENE,
	         CURR_CHCL3,
	         CURR_OP,
	         CURR_PCB,
	         CURR_DEHP,
	         CURR_DIOX,
	         CURR_HCHO,
	         CURR_HCB
	ORDER BY PT_NO, RN ASC
    	
    	
    </select>
    <select id="searchResult_A_getDate" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
    	SELECT /* KRF-BIZ.SearchResultMapper.searchResult_A_getDate */ 
    	       MAX(WMYR||'.'||WMOD) AS WMCYMD  
    	  FROM  RWMDTI_NEW 
    	 WHERE PT_NO IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
    </select>
    
    <select id="searchResult_B_getDate" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
	    SELECT /* KRF-BIZ.SearchResultMapper.searchResult_B_getDate */ 
	           SUBSTR(MAX(BASE_TIME),0,4) AS YEAR , 
	    	   SUBSTR(MAX(BASE_TIME),5,2) AS MONTH ,
	    	   SUBSTR(MAX(BASE_TIME),7,2) AS DAY ,
	       	   MAX(BASE_TIME) AS WMCYMD 
	      FROM TMS_HOURDATA 
		 WHERE FACT_CODE IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
    </select>
    
    <select id="searchResult_B" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

      SELECT 	
			RN
			,WS_NM
			,AM_NM
			,AS_NM
			,PT_NM
			,WAST_NO
			,FACT_KIND_NAME
			,FACT_CAPACITY
			,WMCYMD
			,CURR_BOD
			,CURR_COD
			,CURR_SS
			,CURR_TN
			,CURR_TP
			,CURR_PH
			,CURR_FLW
			,CURR_TOC
			,DO_NM
			,CTY_NM
			,DONG_NM
			,RI_NM
			, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BOD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) ,<![CDATA[  '&'||'QUOT;' ]]>, '"') ||']'  AS CHART_BOD
			, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_COD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) ,<![CDATA[  '&'||'QUOT;' ]]>, '"') ||']' AS CHART_COD
			, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_SS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'QUOT;' ]]>, '"') ||']' AS CHART_SS
			, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'QUOT;' ]]>, '"') ||']' AS CHART_TN
			, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'QUOT;' ]]>, '"') ||']' AS CHART_TP
			, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PH) || '"]') ORDER BY CHART_DATE).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'QUOT;' ]]>, '"') ||']' AS CHART_PH
			, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FLW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'QUOT;' ]]>, '"') ||']' AS CHART_FLW
			, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TOC) || '"]') ORDER BY CHART_DATE).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'QUOT;' ]]>, '"') ||']' AS CHART_TOC
			FROM (
			SELECT A.RN,
			        RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY  B.WMCYMD ASC) AS RN2, 
			       A.WS_NM /* 히든 */ 
			       , 
			       A.AM_NM /* 히든 */ 
			       , 
			       A.AS_NM /* 히든 */ 
			       , 
			       A.PT_NO, 
			       A.PT_NM, 
			       A.WAST_NO, 
			       A.FACT_KIND_NAME /* 히든 */ 
			       , 
			       A.FACT_CAPACITY /* 히든 */ 
			       , 
			       A.WMCYMD AS WMCYMD, 
			       B.WMCYMD AS CHART_DATE, 
			       A.BOD    AS CURR_BOD, 
			       B.BOD    AS CHART_BOD, 
			       A.COD    AS CURR_COD, 
			       B.COD    AS CHART_COD, 
			       A.SS     AS CURR_SS, 
			       B.SS     AS CHART_SS, 
			       A.TN     AS CURR_TN, 
			       B.TN     AS CHART_TN, 
			       A.TP     AS CURR_TP, 
			       B.TP     AS CHART_TP, 
			       A.PH     AS CURR_PH, 
			       B.PH     AS CHART_PH, 
			       A.FLW    AS CURR_FLW, 
			       B.FLW    AS CHART_FLW, 
			       A.TOC    AS CURR_TOC, 
			       B.TOC    AS CHART_TOC, 
			       A.DO_NM /* 히든 */ 
			       , 
			       A.CTY_NM /* 히든 */ 
			       , 
			       A.DONG_NM /* 히든 */ 
			       , 
			       A.RI_NM /* 히든 */ 
			FROM   (SELECT RANK () 
			                 OVER ( 
			                   PARTITION BY A.FACT_CODE, A.WAST_NO 
			                   ORDER BY WMCYMD DESC)  RN, 
			               A.FACT_CODE                AS PT_NO /* 사업장코드 */ 
			               , 
			               B.FACT_NAME                AS PT_NM /* 사업장명 */ 
			               , 
			               A.WAST_NO /* 방류구번호 */ 
			               , 
			               FACT_KIND_NAME /* 시설구분 */ 
			               , 
			               FACT_CAPACITY /* 처리용량 */ 
			               , 
			               SUBSTR (A.WMCYMD, 1, 4) 
			               || '.' 
			               || SUBSTR (A.WMCYMD, 5, 2) 
			               || '.' 
			               || SUBSTR (A.WMCYMD, 7, 2) AS WMCYMD /* 조사년도 */ 
			               , 
			               A.BOD /* BOD (㎎/L) */ 
			               , 
			               A.COD /* COD (㎎/L) */ 
			               , 
			               A.SS /* SS (㎎/L) */ 
			               , 
			               A.TN /* T-N (㎎/L) */ 
			               , 
			               A.TP /* T-P (㎎/L) */ 
			               , 
			               A.PH /* PH */ 
			               , 
			               A.FLW /* 적산유량(평균) (㎥/HOUR) */ 
			               , 
			               A.TOC /* 총유기탄소 (㎎/L) */ 
			               , 
			               F.DO_NM /* 시도 - 히든 */ 
			               , 
			               F.CTY_NM /* 시군구 - 히든 */ 
			               , 
			               F.DONG_NM /* 읍면동 - 히든 */ 
			               , 
			               F.RI_NM /* 동리 - 히든 */ 
			               , 
			               E.WS_NM /* 대권역 - 히든 */ 
			               , 
			               E.AM_NM /* 중권역 - 히든 */ 
			               , 
			               E.AS_NM /* 소권역 - 히든 */ 
			        FROM   (SELECT FACT_CODE, 
			                       WAST_NO, 
			                       BASE_TIME                                 AS WMCYMD, 
			                       MAX(DECODE (ITEM_CODE, 'BOD00', HOUR_VL)) AS BOD, 
			                       MAX(DECODE (ITEM_CODE, 'COD00', HOUR_VL)) AS COD, 
			                       MAX(DECODE (ITEM_CODE, 'SUS00', HOUR_VL)) AS SS, 
			                       MAX(DECODE (ITEM_CODE, 'TON00', HOUR_VL)) AS TN, 
			                       MAX(DECODE (ITEM_CODE, 'TOP00', HOUR_VL)) AS TP, 
			                       MAX(DECODE (ITEM_CODE, 'PHY00', HOUR_VL)) AS PH, 
			                       MAX(DECODE (ITEM_CODE, 'FLW01', HOUR_VL)) AS FLW, 
			                       MAX(DECODE (ITEM_CODE, 'TOC00', HOUR_VL)) AS TOC 
			                FROM   TMS_HOURDATA 
			                GROUP  BY FACT_CODE, 
			                          WAST_NO, 
			                          BASE_TIME) A, 
			               WTMSC_FACT B, 
			               WTMSC_FACT_KIND C, 
			               WTMSC_FACT_WAST_TEMP D, 
			               (SELECT DISTINCT ADM_CD, 
			                                WS_NM, 
			                                AM_NM, 
			                                AS_NM 
			                FROM   KESTI_WATER_ALL_MAP) E, 
			               COM_DISTRICT_RAW F 
			        WHERE  A.FACT_CODE = B.FACT_CODE 
			               AND B.FACT_KIND = C.FACT_KIND 
			               AND A.FACT_CODE = D.FACT_CODE 
			               AND A.WAST_NO = D.WAST_NO 
			               AND SUBSTR (D.ADM_CD, 1, 10) = E.ADM_CD 
			               AND E.ADM_CD = F.ADM_CD 
			               AND SUBSTR (A.WMCYMD, 1, 4) 
			                   || SUBSTR (A.WMCYMD, 5, 2) >= #{startYear} || #{startMonth} 
			               AND SUBSTR (A.WMCYMD, 1, 4) 
			                   || SUBSTR (A.WMCYMD, 5, 2) <![CDATA[ <= #{endYear} || #{endMonth}  ]]>
			               AND A.FACT_CODE IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach> ) A, 
			       (SELECT RANK () 
			                 OVER ( 
			                   PARTITION BY A.FACT_CODE, A.WAST_NO 
			                   ORDER BY WMCYMD DESC)  RN, 
			               A.FACT_CODE                AS PT_NO /* 사업장코드 */ 
			               , 
			               B.FACT_NAME                AS PT_NM /* 사업장명 */ 
			               , 
			               A.WAST_NO /* 방류구번호 */ 
			               , 
			               FACT_KIND_NAME /* 시설구분 */ 
			               , 
			               FACT_CAPACITY /* 처리용량 */ 
			               , 
			               SUBSTR (A.WMCYMD, 1, 4) 
			               || '.' 
			               || SUBSTR (A.WMCYMD, 5, 2) 
			               || '.' 
			               || SUBSTR (A.WMCYMD, 7, 2) AS WMCYMD /* 조사년도 */ 
			               , 
			               A.BOD /* BOD (㎎/L) */ 
			               , 
			               A.COD /* COD (㎎/L) */ 
			               , 
			               A.SS /* SS (㎎/L) */ 
			               , 
			               A.TN /* T-N (㎎/L) */ 
			               , 
			               A.TP /* T-P (㎎/L) */ 
			               , 
			               A.PH /* PH */ 
			               , 
			               A.FLW /* 적산유량(평균) (㎥/HOUR) */ 
			               , 
			               A.TOC /* 총유기탄소 (㎎/L) */ 
			               , 
			               F.DO_NM /* 시도 - 히든 */ 
			               , 
			               F.CTY_NM /* 시군구 - 히든 */ 
			               , 
			               F.DONG_NM /* 읍면동 - 히든 */ 
			               , 
			               F.RI_NM /* 동리 - 히든 */ 
			               , 
			               E.WS_NM /* 대권역 - 히든 */ 
			               , 
			               E.AM_NM /* 중권역 - 히든 */ 
			               , 
			               E.AS_NM /* 소권역 - 히든 */ 
			        FROM   (SELECT FACT_CODE, 
			                       WAST_NO, 
			                       BASE_TIME                                 AS WMCYMD, 
			                       MAX(DECODE (ITEM_CODE, 'BOD00', HOUR_VL)) AS BOD, 
			                       MAX(DECODE (ITEM_CODE, 'COD00', HOUR_VL)) AS COD, 
			                       MAX(DECODE (ITEM_CODE, 'SUS00', HOUR_VL)) AS SS, 
			                       MAX(DECODE (ITEM_CODE, 'TON00', HOUR_VL)) AS TN, 
			                       MAX(DECODE (ITEM_CODE, 'TOP00', HOUR_VL)) AS TP, 
			                       MAX(DECODE (ITEM_CODE, 'PHY00', HOUR_VL)) AS PH, 
			                       MAX(DECODE (ITEM_CODE, 'FLW01', HOUR_VL)) AS FLW, 
			                       MAX(DECODE (ITEM_CODE, 'TOC00', HOUR_VL)) AS TOC 
			                FROM   TMS_HOURDATA 
			                GROUP  BY FACT_CODE, 
			                          WAST_NO, 
			                          BASE_TIME) A, 
			               WTMSC_FACT B, 
			               WTMSC_FACT_KIND C, 
			               WTMSC_FACT_WAST_TEMP D, 
			               (SELECT DISTINCT ADM_CD, 
			                                WS_NM, 
			                                AM_NM, 
			                                AS_NM 
			                FROM   KESTI_WATER_ALL_MAP) E, 
			               COM_DISTRICT_RAW F 
			        WHERE  A.FACT_CODE = B.FACT_CODE 
			               AND B.FACT_KIND = C.FACT_KIND 
			               AND A.FACT_CODE = D.FACT_CODE 
			               AND A.WAST_NO = D.WAST_NO 
			               AND SUBSTR (D.ADM_CD, 1, 10) = E.ADM_CD 
			               AND E.ADM_CD = F.ADM_CD 
			               AND SUBSTR (A.WMCYMD, 1, 4) 
			                   || SUBSTR (A.WMCYMD, 5, 2) >= TO_CHAR ( 
			                   TO_DATE (#{startYear} || #{startMonth}, 'YYYYMM') - 30, 
			                                                 'YYYYMM') 
			               AND SUBSTR (A.WMCYMD, 1, 4) 
			                   || SUBSTR (A.WMCYMD, 5, 2) <![CDATA[ <= #{endYear} || #{endMonth}  ]]>
			               AND A.FACT_CODE IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>  ) B 
			WHERE  A.PT_NO = B.PT_NO 
			       AND A.WAST_NO = B.WAST_NO 
			       AND B.RN BETWEEN A.RN AND A.RN + 4 
			ORDER  BY A.PT_NO, 
			          A.WAST_NO, 
			          A.RN, 
			          B.RN DESC
			          ) GROUP BY RN
			         , WS_NM
			,AM_NM
			,AS_NM
			,PT_NM
			,WAST_NO
			,FACT_KIND_NAME
			,FACT_CAPACITY
			,WMCYMD
			,CURR_BOD
			,CURR_COD
			,CURR_SS
			,CURR_TN
			,CURR_TP
			,CURR_PH
			,CURR_FLW
			,CURR_TOC
			,DO_NM
			,CTY_NM
			,DONG_NM
			,RI_NM

    </select>
    
    
    <!-- 수질자동측정지점 - 미확정 -->
    <select id="searchResult_B001" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
   	WITH TBL_TEMP 
     AS (SELECT RIVER_ID, 
                SITE_NAME, 
                MSR_DATE, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M02' THEN M02 
                      ELSE NULL 
                    END) AS F02, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M03' THEN M03 
                      ELSE NULL 
                    END) AS F03, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M04' THEN M04 
                      ELSE NULL 
                    END) AS F04, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M05' THEN M05 
                      ELSE NULL 
                    END) AS F05, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M06' THEN M06 
                      ELSE NULL 
                    END) AS F06, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M07' THEN M07 
                      ELSE NULL 
                    END) AS F07, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M08' THEN M08 
                      ELSE NULL 
                    END) AS F08, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M09' THEN M09 
                      ELSE NULL 
                    END) AS F09, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M10' THEN M10 
                      ELSE NULL 
                    END) AS F10, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M11' THEN M11 
                      ELSE NULL 
                    END) AS F11, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M12' THEN M12 
                      ELSE NULL 
                    END) AS F12, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M13' THEN M13 
                      ELSE NULL 
                    END) AS F13, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M14' THEN M14 
                      ELSE NULL 
                    END) AS F14, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M15' THEN M15 
                      ELSE NULL 
                    END) AS F15, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M16' THEN M16 
                      ELSE NULL 
                    END) AS F16, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M17' THEN M17 
                      ELSE NULL 
                    END) AS F17, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M18' THEN M18 
                      ELSE NULL 
                    END) AS F18, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M19' THEN M19 
                      ELSE NULL 
                    END) AS F19, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M20' THEN M20 
                      ELSE NULL 
                    END) AS F20, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M21' THEN M21 
                      ELSE NULL 
                    END) AS F21, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M22' THEN M22 
                      ELSE NULL 
                    END) AS F22, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M23' THEN M23 
                      ELSE NULL 
                    END) AS F23, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M24' THEN M24 
                      ELSE NULL 
                    END) AS F24, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M25' THEN M25 
                      ELSE NULL 
                    END) AS F25, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M26' THEN M26 
                      ELSE NULL 
                    END) AS F26, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M27' THEN M27 
                      ELSE NULL 
                    END) AS F27, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M28' THEN M28 
                      ELSE NULL 
                    END) AS F28, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M29' THEN M29 
                      ELSE NULL 
                    END) AS F29, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M30' THEN M30 
                      ELSE NULL 
                    END) AS F30, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M31' THEN M31 
                      ELSE NULL 
                    END) AS F31, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M32' THEN M32 
                      ELSE NULL 
                    END) AS F32, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M33' THEN M33 
                      ELSE NULL 
                    END) AS F33, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M34' THEN M34 
                      ELSE NULL 
                    END) AS F34, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M35' THEN M35 
                      ELSE NULL 
                    END) AS F35, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M36' THEN M36 
                      ELSE NULL 
                    END) AS F36, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M37' THEN M37 
                      ELSE NULL 
                    END) AS F37, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M38' THEN M38 
                      ELSE NULL 
                    END) AS F38, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M39' THEN M39 
                      ELSE NULL 
                    END) AS F39, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M40' THEN M40 
                      ELSE NULL 
                    END) AS F40, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M41' THEN M41 
                      ELSE NULL 
                    END) AS F41, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M42' THEN M42 
                      ELSE NULL 
                    END) AS F42, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M43' THEN M43 
                      ELSE NULL 
                    END) AS F43, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M44' THEN M44 
                      ELSE NULL 
                    END) AS F44, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M45' THEN M45 
                      ELSE NULL 
                    END) AS F45, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M46' THEN M46 
                      ELSE NULL 
                    END) AS F46, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M47' THEN M47 
                      ELSE NULL 
                    END) AS F47, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M48' THEN M48 
                      ELSE NULL 
                    END) AS F48, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M49' THEN M49 
                      ELSE NULL 
                    END) AS F49, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M50' THEN M50 
                      ELSE NULL 
                    END) AS F50, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M51' THEN M51 
                      ELSE NULL 
                    END) AS F51, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M52' THEN M52 
                      ELSE NULL 
                    END) AS F52, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M53' THEN M53 
                      ELSE NULL 
                    END) AS F53, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M54' THEN M54 
                      ELSE NULL 
                    END) AS F54, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M55' THEN M55 
                      ELSE NULL 
                    END) AS F55, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M56' THEN M56 
                      ELSE NULL 
                    END) AS F56, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M57' THEN M57 
                      ELSE NULL 
                    END) AS F57, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M58' THEN M58 
                      ELSE NULL 
                    END) AS F58, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M59' THEN M59 
                      ELSE NULL 
                    END) AS F59, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M60' THEN M60 
                      ELSE NULL 
                    END) AS F60, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M61' THEN M61 
                      ELSE NULL 
                    END) AS F61, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M62' THEN M62 
                      ELSE NULL 
                    END) AS F62, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M63' THEN M63 
                      ELSE NULL 
                    END) AS F63, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M64' THEN M64 
                      ELSE NULL 
                    END) AS F64, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M65' THEN M65 
                      ELSE NULL 
                    END) AS F65, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M66' THEN M66 
                      ELSE NULL 
                    END) AS F66, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M67' THEN M67 
                      ELSE NULL 
                    END) AS F67, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M68' THEN M68 
                      ELSE NULL 
                    END) AS F68, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M69' THEN M69 
                      ELSE NULL 
                    END) AS F69, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M70' THEN M70 
                      ELSE NULL 
                    END) AS F70, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M71' THEN M71 
                      ELSE NULL 
                    END) AS F71, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M72' THEN M72 
                      ELSE NULL 
                    END) AS F72, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M73' THEN M73 
                      ELSE NULL 
                    END) AS F73, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M74' THEN M74 
                      ELSE NULL 
                    END) AS F74, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M75' THEN M75 
                      ELSE NULL 
                    END) AS F75, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M76' THEN M76 
                      ELSE NULL 
                    END) AS F76, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M77' THEN M77 
                      ELSE NULL 
                    END) AS F77, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M78' THEN M78 
                      ELSE NULL 
                    END) AS F78, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M79' THEN M79 
                      ELSE NULL 
                    END) AS F79, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M80' THEN M80 
                      ELSE NULL 
                    END) AS F80, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M81' THEN M81 
                      ELSE NULL 
                    END) AS F81, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M82' THEN M82 
                      ELSE NULL 
                    END) AS F82, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M83' THEN M83 
                      ELSE NULL 
                    END) AS F83, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M84' THEN M84 
                      ELSE NULL 
                    END) AS F84, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M85' THEN M85 
                      ELSE NULL 
                    END) AS F85, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M86' THEN M86 
                      ELSE NULL 
                    END) AS F86, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M87' THEN M87 
                      ELSE NULL 
                    END) AS F87, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M88' THEN M88 
                      ELSE NULL 
                    END) AS F88, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M89' THEN M89 
                      ELSE NULL 
                    END) AS F89, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M90' THEN M90 
                      ELSE NULL 
                    END) AS F90, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M91' THEN M91 
                      ELSE NULL 
                    END) AS F91, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M92' THEN M92 
                      ELSE NULL 
                    END) AS F92, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M93' THEN M93 
                      ELSE NULL 
                    END) AS F93, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M94' THEN M94 
                      ELSE NULL 
                    END) AS F94, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M95' THEN M95 
                      ELSE NULL 
                    END) AS F95, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M96' THEN M96 
                      ELSE NULL 
                    END) AS F96, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M97' THEN M97 
                      ELSE NULL 
                    END) AS F97, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M98' THEN M98 
                      ELSE NULL 
                    END) AS F98, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M99' THEN M99 
                      ELSE NULL 
                    END) AS F99, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M100' THEN M100 
                      ELSE NULL 
                    END) AS F100, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M101' THEN M101 
                      ELSE NULL 
                    END) AS F101, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M105' THEN M105 
                      ELSE NULL 
                    END) AS F105, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M106' THEN M106 
                      ELSE NULL 
                    END) AS F106, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M107' THEN M107 
                      ELSE NULL 
                    END) AS F107, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M108' THEN M108 
                      ELSE NULL 
                    END) AS F108, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M109' THEN M109 
                      ELSE NULL 
                    END) AS F109 
         FROM   (SELECT DECODE(A.RIVER_ID, 'R01', '한강', 
                                           'R02', '낙동강', 
                                           'R03', '금강', 
                                           '영산강') 
                                AS RIVER_ID, 
                        A.SITE_ID, 
                        SITE_NAME, 
                        TO_CHAR(TO_DATE(MSR_DATE, 'YYYY.MM.DD HH24:MI:SS'), 
                        'YYYY.MM.DD HH24:MI' 
                                ) AS 
                        MSR_DATE, 
                        M01, 
                        M02, 
                        M03, 
                        M04, 
                        M05, 
                        M06, 
                        M07, 
                        M08, 
                        M09, 
                        M10, 
                        M11, 
                        M12, 
                        M13, 
                        M14, 
                        M15, 
                        M16, 
                        M17, 
                        M18, 
                        M19, 
                        M20, 
                        M21, 
                        M22, 
                        M23, 
                        M24, 
                        M25, 
                        M26, 
                        M27, 
                        M28, 
                        M29, 
                        M30, 
                        M31, 
                        M32, 
                        M33, 
                        M34, 
                        M35, 
                        M36, 
                        M37, 
                        M38, 
                        M39, 
                        M40, 
                        M41, 
                        M42, 
                        M43, 
                        M44, 
                        M45, 
                        M46, 
                        M47, 
                        M48, 
                        M49, 
                        M50, 
                        M51, 
                        M52, 
                        M53, 
                        M54, 
                        M55, 
                        M56, 
                        M57, 
                        M58, 
                        M59, 
                        M60, 
                        M61, 
                        M62, 
                        M63, 
                        M64, 
                        M65, 
                        M66, 
                        M67, 
                        M68, 
                        M69, 
                        M70, 
                        M71, 
                        M72, 
                        M73, 
                        M74, 
                        M75, 
                        M76, 
                        M77, 
                        M78, 
                        M79, 
                        M80, 
                        M81, 
                        M82, 
                        M83, 
                        M84, 
                        M85, 
                        M86, 
                        M87, 
                        M88, 
                        M89, 
                        M90, 
                        M91, 
                        M92, 
                        M93, 
                        M94, 
                        M95, 
                        M96, 
                        M97, 
                        M98, 
                        M99, 
                        M100, 
                        M101, 
                        M105, 
                        M106, 
                        M107, 
                        M108, 
                        M109 
                 FROM   SITEINFO_TB A, 
                        FIVEDATA_TB B 
                 WHERE  A.SITE_ID = B.SITE_ID 
                        AND A.SITE_ID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
                        AND SUBSTR(MSR_DATE, 1, 10) >= #{startFull} 
                        AND SUBSTR(MSR_DATE, 1, 10) <![CDATA[ <= ]]> #{endFull}) AA, 
                (SELECT SITE_ID, 
                        ITEM_ID 
                 FROM   SITEITEMLIST2_TB 
                 WHERE  USE_YN = '1') BB 
         WHERE  AA.SITE_ID = BB.SITE_ID 
         GROUP  BY RIVER_ID, 
                   SITE_NAME, 
                   MSR_DATE) 
SELECT /* KRF-BIZ.SearchResultMapper.searchResult_B001 */ 
       RIVER_ID, 
       SITE_NAME, 
       MSR_DATE, 
       CASE 
         WHEN F02 IS NOT NULL THEN F02 
         WHEN F38 IS NOT NULL THEN F38 
         ELSE F69 
       END F02, 
       CASE 
         WHEN F03 IS NOT NULL THEN F03 
         WHEN F39 IS NOT NULL THEN F39 
         ELSE F70 
       END F03, 
       CASE 
         WHEN F04 IS NOT NULL THEN F04 
         WHEN F40 IS NOT NULL THEN F40 
         ELSE F71 
       END F04, 
       CASE 
         WHEN F05 IS NOT NULL THEN F05 
         WHEN F41 IS NOT NULL THEN F41 
         ELSE F72 
       END F05, 
       CASE 
         WHEN F06 IS NOT NULL THEN F06 
         ELSE F81 
       END F06, 
       CASE 
         WHEN F79 IS NOT NULL THEN F79 
         WHEN F80 IS NOT NULL THEN F80 
         ELSE F73 
       END F05, 
       F27, 
       F28, 
       F36, 
       F37, 
       F35, 
       F29, 
       F14, 
       F17, 
       F19, 
       F56, 
       F20, 
       F21, 
       F22, 
       F23, 
       F24, 
       F25, 
       F26, 
       F74, 
       F75, 
       F76, 
       F77, 
       CASE 
         WHEN F78 IS NOT NULL THEN F78 
         ELSE F100 
       END F06, 
       F07, 
       F12, 
       F13, 
       F15, 
       F16, 
       F18, 
       F31, 
       F32, 
       F57, 
       F58, 
       F59, 
       F63, 
       F64, 
       F65, 
       F84, 
       F87, 
       F105, 
       F106, 
       F107, 
       F108, 
       F109 
FROM   TBL_TEMP 
ORDER  BY RIVER_ID, 
          MSR_DATE, 
          SITE_NAME 
    	
    </select>
    
    <!-- 수질자동측정지점 - 확정 -->
    <select id="searchResult_B001_Fix" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
    
    WITH TBL_TEMP 
     AS (SELECT RIVER_ID, 
                SITE_NAME, 
                MSR_DATE, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M02' THEN M02 
                      ELSE NULL 
                    END) AS F02, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M03' THEN M03 
                      ELSE NULL 
                    END) AS F03, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M04' THEN M04 
                      ELSE NULL 
                    END) AS F04, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M05' THEN M05 
                      ELSE NULL 
                    END) AS F05, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M06' THEN M06 
                      ELSE NULL 
                    END) AS F06, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M07' THEN M07 
                      ELSE NULL 
                    END) AS F07, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M08' THEN M08 
                      ELSE NULL 
                    END) AS F08, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M09' THEN M09 
                      ELSE NULL 
                    END) AS F09, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M10' THEN M10 
                      ELSE NULL 
                    END) AS F10, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M11' THEN M11 
                      ELSE NULL 
                    END) AS F11, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M12' THEN M12 
                      ELSE NULL 
                    END) AS F12, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M13' THEN M13 
                      ELSE NULL 
                    END) AS F13, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M14' THEN M14 
                      ELSE NULL 
                    END) AS F14, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M15' THEN M15 
                      ELSE NULL 
                    END) AS F15, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M16' THEN M16 
                      ELSE NULL 
                    END) AS F16, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M17' THEN M17 
                      ELSE NULL 
                    END) AS F17, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M18' THEN M18 
                      ELSE NULL 
                    END) AS F18, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M19' THEN M19 
                      ELSE NULL 
                    END) AS F19, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M20' THEN M20 
                      ELSE NULL 
                    END) AS F20, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M21' THEN M21 
                      ELSE NULL 
                    END) AS F21, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M22' THEN M22 
                      ELSE NULL 
                    END) AS F22, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M23' THEN M23 
                      ELSE NULL 
                    END) AS F23, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M24' THEN M24 
                      ELSE NULL 
                    END) AS F24, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M25' THEN M25 
                      ELSE NULL 
                    END) AS F25, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M26' THEN M26 
                      ELSE NULL 
                    END) AS F26, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M27' THEN M27 
                      ELSE NULL 
                    END) AS F27, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M28' THEN M28 
                      ELSE NULL 
                    END) AS F28, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M29' THEN M29 
                      ELSE NULL 
                    END) AS F29, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M30' THEN M30 
                      ELSE NULL 
                    END) AS F30, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M31' THEN M31 
                      ELSE NULL 
                    END) AS F31, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M32' THEN M32 
                      ELSE NULL 
                    END) AS F32, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M33' THEN M33 
                      ELSE NULL 
                    END) AS F33, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M34' THEN M34 
                      ELSE NULL 
                    END) AS F34, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M35' THEN M35 
                      ELSE NULL 
                    END) AS F35, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M36' THEN M36 
                      ELSE NULL 
                    END) AS F36, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M37' THEN M37 
                      ELSE NULL 
                    END) AS F37, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M38' THEN M38 
                      ELSE NULL 
                    END) AS F38, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M39' THEN M39 
                      ELSE NULL 
                    END) AS F39, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M40' THEN M40 
                      ELSE NULL 
                    END) AS F40, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M41' THEN M41 
                      ELSE NULL 
                    END) AS F41, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M42' THEN M42 
                      ELSE NULL 
                    END) AS F42, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M43' THEN M43 
                      ELSE NULL 
                    END) AS F43, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M44' THEN M44 
                      ELSE NULL 
                    END) AS F44, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M45' THEN M45 
                      ELSE NULL 
                    END) AS F45, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M46' THEN M46 
                      ELSE NULL 
                    END) AS F46, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M47' THEN M47 
                      ELSE NULL 
                    END) AS F47, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M48' THEN M48 
                      ELSE NULL 
                    END) AS F48, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M49' THEN M49 
                      ELSE NULL 
                    END) AS F49, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M50' THEN M50 
                      ELSE NULL 
                    END) AS F50, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M51' THEN M51 
                      ELSE NULL 
                    END) AS F51, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M52' THEN M52 
                      ELSE NULL 
                    END) AS F52, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M53' THEN M53 
                      ELSE NULL 
                    END) AS F53, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M54' THEN M54 
                      ELSE NULL 
                    END) AS F54, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M55' THEN M55 
                      ELSE NULL 
                    END) AS F55, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M56' THEN M56 
                      ELSE NULL 
                    END) AS F56, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M57' THEN M57 
                      ELSE NULL 
                    END) AS F57, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M58' THEN M58 
                      ELSE NULL 
                    END) AS F58, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M59' THEN M59 
                      ELSE NULL 
                    END) AS F59, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M60' THEN M60 
                      ELSE NULL 
                    END) AS F60, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M61' THEN M61 
                      ELSE NULL 
                    END) AS F61, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M62' THEN M62 
                      ELSE NULL 
                    END) AS F62, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M63' THEN M63 
                      ELSE NULL 
                    END) AS F63, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M64' THEN M64 
                      ELSE NULL 
                    END) AS F64, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M65' THEN M65 
                      ELSE NULL 
                    END) AS F65, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M66' THEN M66 
                      ELSE NULL 
                    END) AS F66, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M67' THEN M67 
                      ELSE NULL 
                    END) AS F67, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M68' THEN M68 
                      ELSE NULL 
                    END) AS F68, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M69' THEN M69 
                      ELSE NULL 
                    END) AS F69, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M70' THEN M70 
                      ELSE NULL 
                    END) AS F70, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M71' THEN M71 
                      ELSE NULL 
                    END) AS F71, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M72' THEN M72 
                      ELSE NULL 
                    END) AS F72, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M73' THEN M73 
                      ELSE NULL 
                    END) AS F73, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M74' THEN M74 
                      ELSE NULL 
                    END) AS F74, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M75' THEN M75 
                      ELSE NULL 
                    END) AS F75, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M76' THEN M76 
                      ELSE NULL 
                    END) AS F76, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M77' THEN M77 
                      ELSE NULL 
                    END) AS F77, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M78' THEN M78 
                      ELSE NULL 
                    END) AS F78, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M79' THEN M79 
                      ELSE NULL 
                    END) AS F79, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M80' THEN M80 
                      ELSE NULL 
                    END) AS F80, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M81' THEN M81 
                      ELSE NULL 
                    END) AS F81, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M82' THEN M82 
                      ELSE NULL 
                    END) AS F82, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M83' THEN M83 
                      ELSE NULL 
                    END) AS F83, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M84' THEN M84 
                      ELSE NULL 
                    END) AS F84, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M85' THEN M85 
                      ELSE NULL 
                    END) AS F85, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M86' THEN M86 
                      ELSE NULL 
                    END) AS F86, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M87' THEN M87 
                      ELSE NULL 
                    END) AS F87, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M88' THEN M88 
                      ELSE NULL 
                    END) AS F88, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M89' THEN M89 
                      ELSE NULL 
                    END) AS F89, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M90' THEN M90 
                      ELSE NULL 
                    END) AS F90, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M91' THEN M91 
                      ELSE NULL 
                    END) AS F91, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M92' THEN M92 
                      ELSE NULL 
                    END) AS F92, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M93' THEN M93 
                      ELSE NULL 
                    END) AS F93, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M94' THEN M94 
                      ELSE NULL 
                    END) AS F94, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M95' THEN M95 
                      ELSE NULL 
                    END) AS F95, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M96' THEN M96 
                      ELSE NULL 
                    END) AS F96, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M97' THEN M97 
                      ELSE NULL 
                    END) AS F97, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M98' THEN M98 
                      ELSE NULL 
                    END) AS F98, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M99' THEN M99 
                      ELSE NULL 
                    END) AS F99, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M100' THEN M100 
                      ELSE NULL 
                    END) AS F100, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M101' THEN M101 
                      ELSE NULL 
                    END) AS F101, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M105' THEN M105 
                      ELSE NULL 
                    END) AS F105, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M106' THEN M106 
                      ELSE NULL 
                    END) AS F106, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M107' THEN M107 
                      ELSE NULL 
                    END) AS F107, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M108' THEN M108 
                      ELSE NULL 
                    END) AS F108, 
                MAX(CASE 
                      WHEN BB.ITEM_ID = 'M109' THEN M109 
                      ELSE NULL 
                    END) AS F109 
         FROM   (SELECT DECODE(A.RIVER_ID, 'R01', '한강', 
                                           'R02', '낙동강', 
                                           'R03', '금강', 
                                           '영산강') 
                                AS RIVER_ID, 
                        A.SITE_ID, 
                        SITE_NAME, 
                        TO_CHAR(TO_DATE(MSR_DATE, 'YYYY.MM.DD HH24:MI:SS'), 
                        'YYYY.MM.DD HH24:MI' 
                                ) AS 
                        MSR_DATE, 
                        M01, 
                        M02, 
                        M03, 
                        M04, 
                        M05, 
                        M06, 
                        M07, 
                        M08, 
                        M09, 
                        M10, 
                        M11, 
                        M12, 
                        M13, 
                        M14, 
                        M15, 
                        M16, 
                        M17, 
                        M18, 
                        M19, 
                        M20, 
                        M21, 
                        M22, 
                        M23, 
                        M24, 
                        M25, 
                        M26, 
                        M27, 
                        M28, 
                        M29, 
                        M30, 
                        M31, 
                        M32, 
                        M33, 
                        M34, 
                        M35, 
                        M36, 
                        M37, 
                        M38, 
                        M39, 
                        M40, 
                        M41, 
                        M42, 
                        M43, 
                        M44, 
                        M45, 
                        M46, 
                        M47, 
                        M48, 
                        M49, 
                        M50, 
                        M51, 
                        M52, 
                        M53, 
                        M54, 
                        M55, 
                        M56, 
                        M57, 
                        M58, 
                        M59, 
                        M60, 
                        M61, 
                        M62, 
                        M63, 
                        M64, 
                        M65, 
                        M66, 
                        M67, 
                        M68, 
                        M69, 
                        M70, 
                        M71, 
                        M72, 
                        M73, 
                        M74, 
                        M75, 
                        M76, 
                        M77, 
                        M78, 
                        M79, 
                        M80, 
                        M81, 
                        M82, 
                        M83, 
                        M84, 
                        M85, 
                        M86, 
                        M87, 
                        M88, 
                        M89, 
                        M90, 
                        M91, 
                        M92, 
                        M93, 
                        M94, 
                        M95, 
                        M96, 
                        M97, 
                        M98, 
                        M99, 
                        M100, 
                        M101, 
                        M105, 
                        M106, 
                        M107, 
                        M108, 
                        M109 
                 FROM   SITEINFO_TB A, 
                        MAN_FIVEDATA_TB B 
                 WHERE  A.SITE_ID = B.SITE_ID  
                 		AND A.SITE_ID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	
                        AND SUBSTR(MSR_DATE, 1, 6) >= #{startFull} 
                        AND SUBSTR(MSR_DATE, 1, 6) <![CDATA[ <= ]]> #{endFull}) AA, 
                (SELECT SITE_ID, 
                        ITEM_ID 
                 FROM   SITEITEMLIST2_TB 
                 WHERE  USE_YN = '1') BB 
         WHERE  AA.SITE_ID = BB.SITE_ID 
         GROUP  BY RIVER_ID, 
                   SITE_NAME, 
                   MSR_DATE) 
SELECT RIVER_ID, 
       SITE_NAME, 
       MSR_DATE, 
       CASE 
         WHEN F02 IS NOT NULL THEN F02 
         WHEN F38 IS NOT NULL THEN F38 
         ELSE F69 
       END F02, 
       CASE 
         WHEN F03 IS NOT NULL THEN F03 
         WHEN F39 IS NOT NULL THEN F39 
         ELSE F70 
       END F03, 
       CASE 
         WHEN F04 IS NOT NULL THEN F04 
         WHEN F40 IS NOT NULL THEN F40 
         ELSE F71 
       END F04, 
       CASE 
         WHEN F05 IS NOT NULL THEN F05 
         WHEN F41 IS NOT NULL THEN F41 
         ELSE F72 
       END F05, 
       CASE 
         WHEN F06 IS NOT NULL THEN F06 
         ELSE F81 
       END F06, 
       CASE 
         WHEN F79 IS NOT NULL THEN F79 
         WHEN F80 IS NOT NULL THEN F80 
         ELSE F73 
       END F05, 
       F27, 
       F28, 
       F36, 
       F37, 
       F35, 
       F29, 
       F14, 
       F17, 
       F19, 
       F56, 
       F20, 
       F21, 
       F22, 
       F23, 
       F24, 
       F25, 
       F26, 
       F74, 
       F75, 
       F76, 
       F77, 
       CASE 
         WHEN F78 IS NOT NULL THEN F78 
         ELSE F100 
       END F06, 
       F07, 
       F12, 
       F13, 
       F15, 
       F16, 
       F18, 
       F31, 
       F32, 
       F57, 
       F58, 
       F59, 
       F63, 
       F64, 
       F65, 
       F84, 
       F87, 
       F105, 
       F106, 
       F107, 
       F108, 
       F109 
FROM   TBL_TEMP 
ORDER  BY RIVER_ID, 
          MSR_DATE, 
          SITE_NAME 
    
    </select>
    
    <!-- 퇴적물 -->
	<select id="searchResult_C" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

  SELECT RN,		/* KRF-BIZ.SearchResultMapper.searchResult_C */
         PT_NO,
         PT_NM,
         WMYR,
         WMWK,
         WMOM,
         WMOD,
         WMCYMD_VAL,
         WMCTM,
         POLL_STEP,
         CURR_DOW,
         CURR_DOW_SURF,
         CURR_TEMP_SURF,
         CURR_DO_SURF,
         CURR_PH_SURF,
         CURR_EC_SURF,
         CURR_DOW_LOW,
         CURR_TEMP_LOW,
         CURR_DO_LOW,
         CURR_PH_LOW,
         CURR_EC_LOW,
         CURR_TRANSPARENCY,
         CURR_FSD,
         CURR_FST,
         CURR_FCL,
         CURR_WTC,
         CURR_PCA,
         CURR_COD,
         CURR_TOC,
         CURR_TN,
         CURR_TP,
         CURR_SRP,
         CURR_PB,
         CURR_ZN,
         CURR_CU,
         CURR_CR,
         CURR_NI,
         CURR_AS,
         CURR_CD,
         CURR_HG,
         CURR_AL,
         CURR_LI,
         CURR_CL_2_PHENYL,
         CURR_2_CL_2_PHENYL,
         CURR_3_CL_2_PHENYL,
         CURR_4_CL_2_PHENYL,
         CURR_5_CL_2_PHENYL,
         CURR_6_CL_2_PHENYL,
         CURR_7_CL_2_PHENYL,
         CURR_8_CL_2_PHENYL,
         CURR_9_CL_2_PHENYL,
         CURR_10_CL_2_PHENYL,
         CURR_TOT_PCBS,
         CURR_NAPTHALENE,
         CURR_ACENAPTHALENE,
         CURR_ACENAPTHENE,
         CURR_FLUORENE,
         CURR_PHENANTHRENE,
         CURR_ANTHRACENE,
         CURR_FLUORANTHENE,
         CURR_PYRENE,
         CURR_BENZO_A_ANTHRACENE,
         CURR_CRYSENE,
         CURR_BENZO_B_FLUORANTHENE,
         CURR_BENZO_F_FLUORANTHENE,
         CURR_BENZO_A_PYRENE,
         CURR_INDENO_1_2_3_CD_PYRENE,
         CURR_DIBENZO_A_H_ANTHRACENE,
         CURR_BENZO_G_H_I_PERYLENE,
         CURR_TOTAL_PAHS,
         CURR_O_P_DDE,
         CURR_P_P_DDE,
         CURR_O_P_DDD,
         CURR_P_P_DDD,
         CURR_O_P_DDT,
         CURR_P_P_DDT,
         CURR_TOTAL_DDT,
         CURR_1_1_1_TRICHLOROETHANE,
         CURR_1_2_DICHLOROETHANE,
         CURR_BENZENE,
         CURR_CARBON_TETRA_CHLORIDE,
         CURR_CHLOROFORM,
         CURR_ETHYL_BENZENE,
         CURR_METHYL_CHLORIDE,
         CURR_TETRA_CHLORO_ETHYLENE,
         CURR_TRI_CHLORO_ETHYLENE,
         CURR_TOLUENE,
         CURR_M_P_XYLENE,
         CURR_O_XYLENE
       , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DOW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_DOW                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DOW_SURF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                            CHART_DOW_SURF                   
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TEMP_SURF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                            CHART_TEMP_SURF                   
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DO_SURF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_DO_SURF                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PH_SURF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_PH_SURF                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_EC_SURF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_EC_SURF                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DOW_LOW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_DOW_LOW                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TEMP_LOW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_TEMP_LOW                   
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DO_LOW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_DO_LOW                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PH_LOW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_PH_LOW                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_EC_LOW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_EC_LOW                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TRANSPARENCY) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_TRANSPARENCY               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FSD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_FSD                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FST) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_FST                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FCL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_FCL                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_WTC) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_WTC                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PCA) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_PCA                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_COD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_COD                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TOC) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_TOC                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_TN                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_TP                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_SRP) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_SRP                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PB) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_PB                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ZN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_ZN                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CU) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_CU                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CR) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_CR                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_NI) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_NI                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_AS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_AS                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_CD                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_HG) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                    CHART_HG                           
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_AL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_AL                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_LI) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                                  CHART_LI                         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_CL_2_PHENYL                 
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_2_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_2_CL_2_PHENYL               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_3_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_3_CL_2_PHENYL               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_4_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_4_CL_2_PHENYL               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_5_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_5_CL_2_PHENYL               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_6_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_6_CL_2_PHENYL               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_7_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_7_CL_2_PHENYL               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_8_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_8_CL_2_PHENYL               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_9_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_9_CL_2_PHENYL               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_10_CL_2_PHENYL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                      CHART_10_CL_2_PHENYL             
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TOT_PCBS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                            CHART_TOT_PCBS                   
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_NAPTHALENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_NAPTHALENE                 
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ACENAPTHALENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_ACENAPTHALENE               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ACENAPTHENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_ACENAPTHENE                 
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FLUORENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                            CHART_FLUORENE                   
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PHENANTHRENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_PHENANTHRENE               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ANTHRACENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_ANTHRACENE                 
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FLUORANTHENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_FLUORANTHENE               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PYRENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_PYRENE                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BENZO_A_ANTHRACENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                  CHART_BENZO_A_ANTHRACENE         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CRYSENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_CRYSENE                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BENZO_B_FLUORANTHENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                CHART_BENZO_B_FLUORANTHENE       
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BENZO_F_FLUORANTHENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                CHART_BENZO_F_FLUORANTHENE       
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BENZO_A_PYRENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                      CHART_BENZO_A_PYRENE             
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_INDENO_1_2_3_CD_PYRENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS            CHART_INDENO_1_2_3_CD_PYRENE     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_DIBENZO_A_H_ANTHRACENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS            CHART_DIBENZO_A_H_ANTHRACENE     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BENZO_G_H_I_PERYLENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                CHART_BENZO_G_H_I_PERYLENE       
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TOTAL_PAHS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_TOTAL_PAHS                 
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_O_P_DDE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_O_P_DDE                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_P_P_DDE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_P_P_DDE                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_O_P_DDD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_O_P_DDD                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_P_P_DDD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_P_P_DDD                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_O_P_DDT) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_O_P_DDT                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_P_P_DDT) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_P_P_DDT                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TOTAL_DDT) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                            CHART_TOTAL_DDT                   
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_1_1_1_TRICHLOROETHANE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                CHART_1_1_1_TRICHLOROETHANE       
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_1_2_DICHLOROETHANE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                  CHART_1_2_DICHLOROETHANE         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_BENZENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_BENZENE                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CARBON_TETRA_CHLORIDE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                CHART_CARBON_TETRA_CHLORIDE       
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CHLOROFORM) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_CHLOROFORM                 
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ETHYL_BENZENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                        CHART_ETHYL_BENZENE               
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_METHYL_CHLORIDE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                      CHART_METHYL_CHLORIDE             
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TETRA_CHLORO_ETHYLENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                CHART_TETRA_CHLORO_ETHYLENE       
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TRI_CHLORO_ETHYLENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                  CHART_TRI_CHLORO_ETHYLENE         
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TOLUENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                              CHART_TOLUENE                     
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_M_P_XYLENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_M_P_XYLENE                 
        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN_1 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_O_XYLENE) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS                          CHART_O_XYLENE                 
    FROM (  SELECT A_RANK_NUM AS RN,
                   B_ROW_NUM AS RN_1,
                   A_PT_NO AS PT_NO,
                   A_PT_NM AS PT_NM,
                   A_WMYR AS WMYR,
                   A_WMWK AS WMWK,
                   A_WMOM AS WMOM,
                   A_WMOD AS WMOD,
                   (A_WMYR || '.' || A_WMOM || '.' || A_WMOD) AS WMCYMD_VAL,
                   (B_WMYR || '.' || B_WMOM || '.' || B_WMOD) AS CHART_DATE,
                   A_WMCTM AS WMCTM,
                   A_POLL_STEP AS POLL_STEP,
                   A_ITEM_DOW AS CURR_DOW,
                   B_ITEM_DOW AS CHART_DOW,
                   A_ITEM_DOW_SURF AS CURR_DOW_SURF,
                   B_ITEM_DOW_SURF AS CHART_DOW_SURF,
                   A_ITEM_TEMP_SURF AS CURR_TEMP_SURF,
                   B_ITEM_TEMP_SURF AS CHART_TEMP_SURF,
                   A_ITEM_DO_SURF AS CURR_DO_SURF,
                   B_ITEM_DO_SURF AS CHART_DO_SURF,
                   A_ITEM_PH_SURF AS CURR_PH_SURF,
                   B_ITEM_PH_SURF AS CHART_PH_SURF,
                   A_ITEM_EC_SURF AS CURR_EC_SURF,
                   B_ITEM_EC_SURF AS CHART_EC_SURF,
                   A_ITEM_DOW_LOW AS CURR_DOW_LOW,
                   B_ITEM_DOW_LOW AS CHART_DOW_LOW,
                   A_ITEM_TEMP_LOW AS CURR_TEMP_LOW,
                   B_ITEM_TEMP_LOW AS CHART_TEMP_LOW,
                   A_ITEM_DO_LOW AS CURR_DO_LOW,
                   B_ITEM_DO_LOW AS CHART_DO_LOW,
                   A_ITEM_PH_LOW AS CURR_PH_LOW,
                   B_ITEM_PH_LOW AS CHART_PH_LOW,
                   A_ITEM_EC_LOW AS CURR_EC_LOW,
                   B_ITEM_EC_LOW AS CHART_EC_LOW,
                   A_ITEM_TRANSPARENCY AS CURR_TRANSPARENCY,
                   B_ITEM_TRANSPARENCY AS CHART_TRANSPARENCY,
                   A_ITEM_FSD AS CURR_FSD,
                   B_ITEM_FSD AS CHART_FSD,
                   A_ITEM_FST AS CURR_FST,
                   B_ITEM_FST AS CHART_FST,
                   A_ITEM_FCL AS CURR_FCL,
                   B_ITEM_FCL AS CHART_FCL,
                   A_ITEM_WTC AS CURR_WTC,
                   B_ITEM_WTC AS CHART_WTC,
                   A_ITEM_PCA AS CURR_PCA,
                   B_ITEM_PCA AS CHART_PCA,
                   A_ITEM_COD AS CURR_COD,
                   B_ITEM_COD AS CHART_COD,
                   A_ITEM_TOC AS CURR_TOC,
                   B_ITEM_TOC AS CHART_TOC,
                   A_ITEM_TN AS CURR_TN,
                   B_ITEM_TN AS CHART_TN,
                   A_ITEM_TP AS CURR_TP,
                   B_ITEM_TP AS CHART_TP,
                   A_ITEM_SRP AS CURR_SRP,
                   B_ITEM_SRP AS CHART_SRP,
                   A_ITEM_PB AS CURR_PB,
                   B_ITEM_PB AS CHART_PB,
                   A_ITEM_ZN AS CURR_ZN,
                   B_ITEM_ZN AS CHART_ZN,
                   A_ITEM_CU AS CURR_CU,
                   B_ITEM_CU AS CHART_CU,
                   A_ITEM_CR AS CURR_CR,
                   B_ITEM_CR AS CHART_CR,
                   A_ITEM_NI AS CURR_NI,
                   B_ITEM_NI AS CHART_NI,
                   A_ITEM_AS AS CURR_AS,
                   B_ITEM_AS AS CHART_AS,
                   A_ITEM_CD AS CURR_CD,
                   B_ITEM_CD AS CHART_CD,
                   A_ITEM_HG AS CURR_HG,
                   B_ITEM_HG AS CHART_HG,
                   A_ITEM_AL AS CURR_AL,
                   B_ITEM_AL AS CHART_AL,
                   A_ITEM_LI AS CURR_LI,
                   B_ITEM_LI AS CHART_LI,
                   A_ITEM_CL_2_PHENYL AS CURR_CL_2_PHENYL,
                   B_ITEM_CL_2_PHENYL AS CHART_CL_2_PHENYL,
                   A_ITEM_2_CL_2_PHENYL AS CURR_2_CL_2_PHENYL,
                   B_ITEM_2_CL_2_PHENYL AS CHART_2_CL_2_PHENYL,
                   A_ITEM_3_CL_2_PHENYL AS CURR_3_CL_2_PHENYL,
                   B_ITEM_3_CL_2_PHENYL AS CHART_3_CL_2_PHENYL,
                   A_ITEM_4_CL_2_PHENYL AS CURR_4_CL_2_PHENYL,
                   B_ITEM_4_CL_2_PHENYL AS CHART_4_CL_2_PHENYL,
                   A_ITEM_5_CL_2_PHENYL AS CURR_5_CL_2_PHENYL,
                   B_ITEM_5_CL_2_PHENYL AS CHART_5_CL_2_PHENYL,
                   A_ITEM_6_CL_2_PHENYL AS CURR_6_CL_2_PHENYL,
                   B_ITEM_6_CL_2_PHENYL AS CHART_6_CL_2_PHENYL,
                   A_ITEM_7_CL_2_PHENYL AS CURR_7_CL_2_PHENYL,
                   B_ITEM_7_CL_2_PHENYL AS CHART_7_CL_2_PHENYL,
                   A_ITEM_8_CL_2_PHENYL AS CURR_8_CL_2_PHENYL,
                   B_ITEM_8_CL_2_PHENYL AS CHART_8_CL_2_PHENYL,
                   A_ITEM_9_CL_2_PHENYL AS CURR_9_CL_2_PHENYL,
                   B_ITEM_9_CL_2_PHENYL AS CHART_9_CL_2_PHENYL,
                   A_ITEM_10_CL_2_PHENYL AS CURR_10_CL_2_PHENYL,
                   B_ITEM_10_CL_2_PHENYL AS CHART_10_CL_2_PHENYL,
                   A_ITEM_TOT_PCBS AS CURR_TOT_PCBS,
                   B_ITEM_TOT_PCBS AS CHART_TOT_PCBS,
                   A_ITEM_NAPTHALENE AS CURR_NAPTHALENE,
                   B_ITEM_NAPTHALENE AS CHART_NAPTHALENE,
                   A_ITEM_ACENAPTHALENE AS CURR_ACENAPTHALENE,
                   B_ITEM_ACENAPTHALENE AS CHART_ACENAPTHALENE,
                   A_ITEM_ACENAPTHENE AS CURR_ACENAPTHENE,
                   B_ITEM_ACENAPTHENE AS CHART_ACENAPTHENE,
                   A_ITEM_FLUORENE AS CURR_FLUORENE,
                   B_ITEM_FLUORENE AS CHART_FLUORENE,
                   A_ITEM_PHENANTHRENE AS CURR_PHENANTHRENE,
                   B_ITEM_PHENANTHRENE AS CHART_PHENANTHRENE,
                   A_ITEM_ANTHRACENE AS CURR_ANTHRACENE,
                   B_ITEM_ANTHRACENE AS CHART_ANTHRACENE,
                   A_ITEM_FLUORANTHENE AS CURR_FLUORANTHENE,
                   B_ITEM_FLUORANTHENE AS CHART_FLUORANTHENE,
                   A_ITEM_PYRENE AS CURR_PYRENE,
                   B_ITEM_PYRENE AS CHART_PYRENE,
                   A_ITEM_BENZO_A_ANTHRACENE AS CURR_BENZO_A_ANTHRACENE,
                   B_ITEM_BENZO_A_ANTHRACENE AS CHART_BENZO_A_ANTHRACENE,
                   A_ITEM_CRYSENE AS CURR_CRYSENE,
                   B_ITEM_CRYSENE AS CHART_CRYSENE,
                   A_ITEM_BENZO_B_FLUORANTHENE AS CURR_BENZO_B_FLUORANTHENE,
                   B_ITEM_BENZO_B_FLUORANTHENE AS CHART_BENZO_B_FLUORANTHENE,
                   A_ITEM_BENZO_F_FLUORANTHENE AS CURR_BENZO_F_FLUORANTHENE,
                   B_ITEM_BENZO_F_FLUORANTHENE AS CHART_BENZO_F_FLUORANTHENE,
                   A_ITEM_BENZO_A_PYRENE AS CURR_BENZO_A_PYRENE,
                   B_ITEM_BENZO_A_PYRENE AS CHART_BENZO_A_PYRENE,
                   A_ITEM_INDENO_1_2_3_CD_PYRENE AS CURR_INDENO_1_2_3_CD_PYRENE,
                   B_ITEM_INDENO_1_2_3_CD_PYRENE AS CHART_INDENO_1_2_3_CD_PYRENE,
                   A_ITEM_DIBENZO_A_H_ANTHRACENE AS CURR_DIBENZO_A_H_ANTHRACENE,
                   B_ITEM_DIBENZO_A_H_ANTHRACENE AS CHART_DIBENZO_A_H_ANTHRACENE,
                   A_ITEM_BENZO_G_H_I_PERYLENE AS CURR_BENZO_G_H_I_PERYLENE,
                   B_ITEM_BENZO_G_H_I_PERYLENE AS CHART_BENZO_G_H_I_PERYLENE,
                   A_ITEM_TOTAL_PAHS AS CURR_TOTAL_PAHS,
                   B_ITEM_TOTAL_PAHS AS CHART_TOTAL_PAHS,
                   A_ITEM_O_P_DDE AS CURR_O_P_DDE,
                   B_ITEM_O_P_DDE AS CHART_O_P_DDE,
                   A_ITEM_P_P_DDE AS CURR_P_P_DDE,
                   B_ITEM_P_P_DDE AS CHART_P_P_DDE,
                   A_ITEM_O_P_DDD AS CURR_O_P_DDD,
                   B_ITEM_O_P_DDD AS CHART_O_P_DDD,
                   A_ITEM_P_P_DDD AS CURR_P_P_DDD,
                   B_ITEM_P_P_DDD AS CHART_P_P_DDD,
                   A_ITEM_O_P_DDT AS CURR_O_P_DDT,
                   B_ITEM_O_P_DDT AS CHART_O_P_DDT,
                   A_ITEM_P_P_DDT AS CURR_P_P_DDT,
                   B_ITEM_P_P_DDT AS CHART_P_P_DDT,
                   A_ITEM_TOTAL_DDT AS CURR_TOTAL_DDT,
                   B_ITEM_TOTAL_DDT AS CHART_TOTAL_DDT,
                   A_ITEM_1_1_1_TRICHLOROETHANE AS CURR_1_1_1_TRICHLOROETHANE,
                   B_ITEM_1_1_1_TRICHLOROETHANE AS CHART_1_1_1_TRICHLOROETHANE,
                   A_ITEM_1_2_DICHLOROETHANE AS CURR_1_2_DICHLOROETHANE,
                   B_ITEM_1_2_DICHLOROETHANE AS CHART_1_2_DICHLOROETHANE,
                   A_ITEM_BENZENE AS CURR_BENZENE,
                   B_ITEM_BENZENE AS CHART_BENZENE,
                   A_ITEM_CARBON_TETRA_CHLORIDE AS CURR_CARBON_TETRA_CHLORIDE,
                   B_ITEM_CARBON_TETRA_CHLORIDE AS CHART_CARBON_TETRA_CHLORIDE,
                   A_ITEM_CHLOROFORM AS CURR_CHLOROFORM,
                   B_ITEM_CHLOROFORM AS CHART_CHLOROFORM,
                   A_ITEM_ETHYL_BENZENE AS CURR_ETHYL_BENZENE,
                   B_ITEM_ETHYL_BENZENE AS CHART_ETHYL_BENZENE,
                   A_ITEM_METHYL_CHLORIDE AS CURR_METHYL_CHLORIDE,
                   B_ITEM_METHYL_CHLORIDE AS CHART_METHYL_CHLORIDE,
                   A_ITEM_TETRA_CHLORO_ETHYLENE AS CURR_TETRA_CHLORO_ETHYLENE,
                   B_ITEM_TETRA_CHLORO_ETHYLENE AS CHART_TETRA_CHLORO_ETHYLENE,
                   A_ITEM_TRI_CHLORO_ETHYLENE AS CURR_TRI_CHLORO_ETHYLENE,
                   B_ITEM_TRI_CHLORO_ETHYLENE AS CHART_TRI_CHLORO_ETHYLENE,
                   A_ITEM_TOLUENE AS CURR_TOLUENE,
                   B_ITEM_TOLUENE AS CHART_TOLUENE,
                   A_ITEM_M_P_XYLENE AS CURR_M_P_XYLENE,
                   B_ITEM_M_P_XYLENE AS CHART_M_P_XYLENE,
                   A_ITEM_O_XYLENE AS CURR_O_XYLENE,
                   B_ITEM_O_XYLENE AS CHART_O_XYLENE
              FROM (SELECT A.RANK_NUM AS A_RANK_NUM                       --번호
                                                   ,
                           A.PT_NO AS A_PT_NO                           --지점번호
                                             ,
                           A.PT_NM AS A_PT_NM                            --지점명
                                             ,
                           A.WMYR AS A_WMYR                             --채취년도
                                           ,
                           DECODE (A.WMWK, '1', '상반기', '2', '하반기')
                              AS A_WMWK                                   --반기
                                       ,
                           A.WMOM AS A_WMOM                              --채취월
                                           ,
                           A.WMOD AS A_WMOD                              --채취일
                                           ,
                           A.WMCTM AS A_WMCTM                           --채취시간
                                             ,
                           A.POLL_STEP AS A_POLL_STEP                   --오염단계
                                                     ,
                           B.ROW_NUM AS B_ROW_NUM,
                           B.PT_NO AS B_PT_NO,
                           B.WMYR AS B_WMYR                           --과거 채취년
                                           ,
                           DECODE (B.WMWK, '1', '상반기', '2', '하반기')
                              AS B_WMWK                                --과거 반기
                                       ,
                           B.WMOM AS B_WMOM                           --과거 채취월
                                           ,
                           B.WMOD AS B_WMOD                           --과거 채취일
                                           ,
                           A.ITEM_DOW AS A_ITEM_DOW,
                           B.ITEM_DOW AS B_ITEM_DOW                  --최고수심(m)
                                                   ,
                           A.ITEM_DOW_SURF AS A_ITEM_DOW_SURF,
                           B.ITEM_DOW_SURF AS B_ITEM_DOW_SURF    --표층-측정 수심(m)
                                                             ,
                           A.ITEM_TEMP_SURF AS A_ITEM_TEMP_SURF,
                           B.ITEM_TEMP_SURF AS B_ITEM_TEMP_SURF     --표층-수온(℃)
                                                               ,
                           A.ITEM_DO_SURF AS A_ITEM_DO_SURF,
                           B.ITEM_DO_SURF AS B_ITEM_DO_SURF       --표층-DO(㎎/L)
                                                           ,
                           A.ITEM_PH_SURF AS A_ITEM_PH_SURF,
                           B.ITEM_PH_SURF AS B_ITEM_PH_SURF            --표층 pH
                                                           ,
                           A.ITEM_EC_SURF AS A_ITEM_EC_SURF,
                           B.ITEM_EC_SURF AS B_ITEM_EC_SURF --표층 전기전도도(25℃ μS/㎝)
                                                           ,
                           A.ITEM_DOW_LOW AS A_ITEM_DOW_LOW,
                           B.ITEM_DOW_LOW AS B_ITEM_DOW_LOW      --저층-측정 수심(m)
                                                           ,
                           A.ITEM_TEMP_LOW AS A_ITEM_TEMP_LOW,
                           B.ITEM_TEMP_LOW AS B_ITEM_TEMP_LOW       --저층 수온(℃)
                                                             ,
                           A.ITEM_DO_LOW AS A_ITEM_DO_LOW,
                           B.ITEM_DO_LOW AS B_ITEM_DO_LOW         --저층 DO(㎎/L)
                                                         ,
                           A.ITEM_PH_LOW AS A_ITEM_PH_LOW,
                           B.ITEM_PH_LOW AS B_ITEM_PH_LOW              --저층 pH
                                                         ,
                           A.ITEM_EC_LOW AS A_ITEM_EC_LOW,
                           B.ITEM_EC_LOW AS B_ITEM_EC_LOW --저층 전기전도도(25℃ μS/㎝)
                                                         ,
                           A.ITEM_TRANSPARENCY AS A_ITEM_TRANSPARENCY,
                           B.ITEM_TRANSPARENCY AS B_ITEM_TRANSPARENCY --투명도(m)
                                                                     ,
                           A.ITEM_FSD AS A_ITEM_FSD,
                           B.ITEM_FSD AS B_ITEM_FSD                 --입도-모래(%)
                                                   ,
                           A.ITEM_FST AS A_ITEM_FST,
                           B.ITEM_FST AS B_ITEM_FST                 --입도-실트(%)
                                                   ,
                           A.ITEM_FCL AS A_ITEM_FCL,
                           B.ITEM_FCL AS B_ITEM_FCL                 --입도-점토(%)
                                                   ,
                           A.ITEM_WTC AS A_ITEM_WTC,
                           B.ITEM_WTC AS B_ITEM_WTC                   --함수율(%)
                                                   ,
                           A.ITEM_PCA AS A_ITEM_PCA,
                           B.ITEM_PCA AS B_ITEM_PCA               --완전연소가능량(%)
                                                   ,
                           A.ITEM_COD AS A_ITEM_COD,
                           B.ITEM_COD AS B_ITEM_COD                   --COD(%)
                                                   ,
                           A.ITEM_TOC AS A_ITEM_TOC,
                           B.ITEM_TOC AS B_ITEM_TOC                   --TOC(%)
                                                   ,
                           A.ITEM_TN AS A_ITEM_TN,
                           B.ITEM_TN AS B_ITEM_TN                   --T-N(㎎/㎏)
                                                 ,
                           A.ITEM_TP AS A_ITEM_TP,
                           B.ITEM_TP AS B_ITEM_TP                   --T-P(㎎/㎏)
                                                 ,
                           A.ITEM_SRP AS A_ITEM_SRP,
                           B.ITEM_SRP AS B_ITEM_SRP                 --SRP(㎎/㎏)
                                                   ,
                           A.ITEM_PB AS A_ITEM_PB,
                           B.ITEM_PB AS B_ITEM_PB                    --Pb(㎎/㎏)
                                                 ,
                           A.ITEM_ZN AS A_ITEM_ZN,
                           B.ITEM_ZN AS B_ITEM_ZN                    --Zn(㎎/㎏)
                                                 ,
                           A.ITEM_CU AS A_ITEM_CU,
                           B.ITEM_CU AS B_ITEM_CU                    --Cu(㎎/㎏)
                                                 ,
                           A.ITEM_CR AS A_ITEM_CR,
                           B.ITEM_CR AS B_ITEM_CR                    --Cr(㎎/㎏)
                                                 ,
                           A.ITEM_NI AS A_ITEM_NI,
                           B.ITEM_NI AS B_ITEM_NI                    --Ni(㎎/㎏)
                                                 ,
                           A.ITEM_AS AS A_ITEM_AS,
                           B.ITEM_AS AS B_ITEM_AS                    --As(㎎/㎏)
                                                 ,
                           A.ITEM_CD AS A_ITEM_CD,
                           B.ITEM_CD AS B_ITEM_CD                    --Cd(㎎/㎏)
                                                 ,
                           A.ITEM_HG AS A_ITEM_HG,
                           B.ITEM_HG AS B_ITEM_HG                    --Hg(㎎/㎏)
                                                 ,
                           A.ITEM_AL AS A_ITEM_AL,
                           B.ITEM_AL AS B_ITEM_AL                      --Al(%)
                                                 ,
                           A.ITEM_LI AS A_ITEM_LI,
                           B.ITEM_LI AS B_ITEM_LI                    --Li(㎎/㎏)
                                                 ,
                           A.ITEM_CL_2_PHENYL AS A_ITEM_CL_2_PHENYL,
                           B.ITEM_CL_2_PHENYL AS B_ITEM_CL_2_PHENYL --Chlorobiphenyl(㎍/㎏)
                                                                   ,
                           A.ITEM_2_CL_2_PHENYL AS A_ITEM_2_CL_2_PHENYL,
                           B.ITEM_2_CL_2_PHENYL AS B_ITEM_2_CL_2_PHENYL --Dichlorobiphenyl(㎍/㎏)
                                                                       ,
                           A.ITEM_3_CL_2_PHENYL AS A_ITEM_3_CL_2_PHENYL,
                           B.ITEM_3_CL_2_PHENYL AS B_ITEM_3_CL_2_PHENYL --Trichlorobiphenyl(㎍/㎏)
                                                                       ,
                           A.ITEM_4_CL_2_PHENYL AS A_ITEM_4_CL_2_PHENYL,
                           B.ITEM_4_CL_2_PHENYL AS B_ITEM_4_CL_2_PHENYL --Tetrachlorobiphenyl(㎍/㎏)
                                                                       ,
                           A.ITEM_5_CL_2_PHENYL AS A_ITEM_5_CL_2_PHENYL,
                           B.ITEM_5_CL_2_PHENYL AS B_ITEM_5_CL_2_PHENYL --Pentachlorobiphenyl(㎍/㎏)
                                                                       ,
                           A.ITEM_6_CL_2_PHENYL AS A_ITEM_6_CL_2_PHENYL,
                           B.ITEM_6_CL_2_PHENYL AS B_ITEM_6_CL_2_PHENYL --Hexachlorobiphenyl(㎍/㎏)
                                                                       ,
                           A.ITEM_7_CL_2_PHENYL AS A_ITEM_7_CL_2_PHENYL,
                           B.ITEM_7_CL_2_PHENYL AS B_ITEM_7_CL_2_PHENYL --Heptachlorobiphenyl(㎍/㎏)
                                                                       ,
                           A.ITEM_8_CL_2_PHENYL AS A_ITEM_8_CL_2_PHENYL,
                           B.ITEM_8_CL_2_PHENYL AS B_ITEM_8_CL_2_PHENYL --Octachlorobiphenyl(㎍/㎏)
                                                                       ,
                           A.ITEM_9_CL_2_PHENYL AS A_ITEM_9_CL_2_PHENYL,
                           B.ITEM_9_CL_2_PHENYL AS B_ITEM_9_CL_2_PHENYL --Nonachlorobiphenyl(㎍/㎏)
                                                                       ,
                           A.ITEM_10_CL_2_PHENYL AS A_ITEM_10_CL_2_PHENYL,
                           B.ITEM_10_CL_2_PHENYL AS B_ITEM_10_CL_2_PHENYL --Decachlorobiphenyl(㎍/㎏)
                                                                         ,
                           A.ITEM_TOT_PCBS AS A_ITEM_TOT_PCBS,
                           B.ITEM_TOT_PCBS AS B_ITEM_TOT_PCBS --Total PCBs(㎍/㎏)
                                                             ,
                           A.ITEM_NAPTHALENE AS A_ITEM_NAPTHALENE,
                           B.ITEM_NAPTHALENE AS B_ITEM_NAPTHALENE --Naphthalene(㎍/㎏)
                                                                 ,
                           A.ITEM_ACENAPTHALENE AS A_ITEM_ACENAPTHALENE,
                           B.ITEM_ACENAPTHALENE AS B_ITEM_ACENAPTHALENE --Acenaphthylene(㎍/㎏)
                                                                       ,
                           A.ITEM_ACENAPTHENE AS A_ITEM_ACENAPTHENE,
                           B.ITEM_ACENAPTHENE AS B_ITEM_ACENAPTHENE --Acenaphthene(㎍/㎏)
                                                                   ,
                           A.ITEM_FLUORENE AS A_ITEM_FLUORENE,
                           B.ITEM_FLUORENE AS B_ITEM_FLUORENE  --Fluorene(㎍/㎏)
                                                             ,
                           A.ITEM_PHENANTHRENE AS A_ITEM_PHENANTHRENE,
                           B.ITEM_PHENANTHRENE AS B_ITEM_PHENANTHRENE --Phenanthrene(㎍/㎏)
                                                                     ,
                           A.ITEM_ANTHRACENE AS A_ITEM_ANTHRACENE,
                           B.ITEM_ANTHRACENE AS B_ITEM_ANTHRACENE --Anthracene(㎍/㎏)
                                                                 ,
                           A.ITEM_FLUORANTHENE AS A_ITEM_FLUORANTHENE,
                           B.ITEM_FLUORANTHENE AS B_ITEM_FLUORANTHENE --Fluoranthene(㎍/㎏)
                                                                     ,
                           A.ITEM_PYRENE AS A_ITEM_PYRENE,
                           B.ITEM_PYRENE AS B_ITEM_PYRENE        --Pyrene(㎍/㎏)
                                                         ,
                           A.ITEM_BENZO_A_ANTHRACENE AS A_ITEM_BENZO_A_ANTHRACENE,
                           B.ITEM_BENZO_A_ANTHRACENE AS B_ITEM_BENZO_A_ANTHRACENE --Benzo[a]anthracene(㎍/㎏)
                                                                                 ,
                           A.ITEM_CRYSENE AS A_ITEM_CRYSENE,
                           B.ITEM_CRYSENE AS B_ITEM_CRYSENE    --Chrysene(㎍/㎏)
                                                           ,
                           A.ITEM_BENZO_B_FLUORANTHENE
                              AS A_ITEM_BENZO_B_FLUORANTHENE,
                           B.ITEM_BENZO_B_FLUORANTHENE
                              AS B_ITEM_BENZO_B_FLUORANTHENE --Benzo[b]fluoranthene(㎍/㎏)
                                                            ,
                           A.ITEM_BENZO_F_FLUORANTHENE
                              AS A_ITEM_BENZO_F_FLUORANTHENE,
                           B.ITEM_BENZO_F_FLUORANTHENE
                              AS B_ITEM_BENZO_F_FLUORANTHENE --Benzo[k]fluoranthene(㎍/㎏)
                                                            ,
                           A.ITEM_BENZO_A_PYRENE AS A_ITEM_BENZO_A_PYRENE,
                           B.ITEM_BENZO_A_PYRENE AS B_ITEM_BENZO_A_PYRENE --Benzo[a]pyrene(㎍/㎏)
                                                                         ,
                           A.ITEM_INDENO_1_2_3_CD_PYRENE
                              AS A_ITEM_INDENO_1_2_3_CD_PYRENE,
                           B.ITEM_INDENO_1_2_3_CD_PYRENE
                              AS B_ITEM_INDENO_1_2_3_CD_PYRENE --Indeno[1,2,3-cd]pyrene(㎍/㎏)
                                                              ,
                           A.ITEM_DIBENZO_A_H_ANTHRACENE
                              AS A_ITEM_DIBENZO_A_H_ANTHRACENE,
                           B.ITEM_DIBENZO_A_H_ANTHRACENE
                              AS B_ITEM_DIBENZO_A_H_ANTHRACENE --Dibenzo[a,h]anthracene(㎍/㎏)
                                                              ,
                           A.ITEM_BENZO_G_H_I_PERYLENE
                              AS A_ITEM_BENZO_G_H_I_PERYLENE,
                           B.ITEM_BENZO_G_H_I_PERYLENE
                              AS B_ITEM_BENZO_G_H_I_PERYLENE --Benzo[g,h,i]perylene(㎍/㎏)
                                                            ,
                           A.ITEM_TOTAL_PAHS AS A_ITEM_TOTAL_PAHS,
                           B.ITEM_TOTAL_PAHS AS B_ITEM_TOTAL_PAHS --Total PAHs(㎍/㎏)
                                                                 ,
                           A.ITEM_O_P_DDE AS A_ITEM_O_P_DDE,
                           B.ITEM_O_P_DDE AS B_ITEM_O_P_DDE    --o,p'-DDE(㎍/㎏)
                                                           ,
                           A.ITEM_P_P_DDE AS A_ITEM_P_P_DDE,
                           B.ITEM_P_P_DDE AS B_ITEM_P_P_DDE    --p,p'-DDE(㎍/㎏)
                                                           ,
                           A.ITEM_O_P_DDD AS A_ITEM_O_P_DDD,
                           B.ITEM_O_P_DDD AS B_ITEM_O_P_DDD    --o,p'-DDD(㎍/㎏)
                                                           ,
                           A.ITEM_P_P_DDD AS A_ITEM_P_P_DDD,
                           B.ITEM_P_P_DDD AS B_ITEM_P_P_DDD    --p,p'-DDD(㎍/㎏)
                                                           ,
                           A.ITEM_O_P_DDT AS A_ITEM_O_P_DDT,
                           B.ITEM_O_P_DDT AS B_ITEM_O_P_DDT    --o,p'-DDT(㎍/㎏)
                                                           ,
                           A.ITEM_P_P_DDT AS A_ITEM_P_P_DDT,
                           B.ITEM_P_P_DDT AS B_ITEM_P_P_DDT    --p,p'-DDT(㎍/㎏)
                                                           ,
                           A.ITEM_TOTAL_DDT AS A_ITEM_TOTAL_DDT,
                           B.ITEM_TOTAL_DDT AS B_ITEM_TOTAL_DDT --Total DDTs(㎍/㎏)
                                                               ,
                           A.ITEM_1_1_1_TRICHLOROETHANE
                              AS A_ITEM_1_1_1_TRICHLOROETHANE,
                           B.ITEM_1_1_1_TRICHLOROETHANE
                              AS B_ITEM_1_1_1_TRICHLOROETHANE --1,1,1-Trichloroethane(㎍/㎏)
                                                             ,
                           A.ITEM_1_2_DICHLOROETHANE AS A_ITEM_1_2_DICHLOROETHANE,
                           B.ITEM_1_2_DICHLOROETHANE AS B_ITEM_1_2_DICHLOROETHANE --1,2-Dichloroethane(㎍/㎏)
                                                                                 ,
                           A.ITEM_BENZENE AS A_ITEM_BENZENE,
                           B.ITEM_BENZENE AS B_ITEM_BENZENE     --Benzene(㎍/㎏)
                                                           ,
                           A.ITEM_CARBON_TETRA_CHLORIDE
                              AS A_ITEM_CARBON_TETRA_CHLORIDE,
                           B.ITEM_CARBON_TETRA_CHLORIDE
                              AS B_ITEM_CARBON_TETRA_CHLORIDE --Carbon tetrachloride(㎍/㎏)
                                                             ,
                           A.ITEM_CHLOROFORM AS A_ITEM_CHLOROFORM,
                           B.ITEM_CHLOROFORM AS B_ITEM_CHLOROFORM --Chloroform(㎍/㎏)
                                                                 ,
                           A.ITEM_ETHYL_BENZENE AS A_ITEM_ETHYL_BENZENE,
                           B.ITEM_ETHYL_BENZENE AS B_ITEM_ETHYL_BENZENE --Ethylbenzene(㎍/㎏)
                                                                       ,
                           A.ITEM_METHYL_CHLORIDE AS A_ITEM_METHYL_CHLORIDE,
                           B.ITEM_METHYL_CHLORIDE AS B_ITEM_METHYL_CHLORIDE --Methyl Chloride(㎍/㎏)
                                                                           ,
                           A.ITEM_TETRA_CHLORO_ETHYLENE
                              AS A_ITEM_TETRA_CHLORO_ETHYLENE,
                           B.ITEM_TETRA_CHLORO_ETHYLENE
                              AS B_ITEM_TETRA_CHLORO_ETHYLENE --Tetrachloroethylene(㎍/㎏)
                                                             ,
                           A.ITEM_TRI_CHLORO_ETHYLENE
                              AS A_ITEM_TRI_CHLORO_ETHYLENE,
                           B.ITEM_TRI_CHLORO_ETHYLENE
                              AS B_ITEM_TRI_CHLORO_ETHYLENE --Trichloroethylene(㎍/㎏)
                                                           ,
                           A.ITEM_TOLUENE AS A_ITEM_TOLUENE,
                           B.ITEM_TOLUENE AS B_ITEM_TOLUENE     --Toluene(㎍/㎏)
                                                           ,
                           A.ITEM_M_P_XYLENE AS A_ITEM_M_P_XYLENE,
                           B.ITEM_M_P_XYLENE AS B_ITEM_M_P_XYLENE --m,p-Xylene(㎍/㎏)
                                                                 ,
                           A.ITEM_O_XYLENE AS A_ITEM_O_XYLENE,
                           B.ITEM_O_XYLENE AS B_ITEM_O_XYLENE  --o-Xylene(㎍/㎏)
                      FROM (  SELECT RANK () OVER (ORDER BY PT_NO) AS RANK_NUM,
                                     AA.*
                                FROM (SELECT ROW_NUMBER ()
                                                OVER (
                                                   PARTITION BY A.PT_NO
                                                   ORDER BY
                                                      A.PT_NO, WMYR DESC, WMOM DESC)
                                                AS ROW_NUM,
                                             A.PT_NO,
                                             B.PT_NM,
                                             WMYR,
                                             WMWK,
                                             WMOM,
                                             WMOD,
                                             WMCTM,
                                             POLL_STEP,
                                             ITEM_DOW,
                                             ITEM_DOW_SURF,
                                             ITEM_TEMP_SURF,
                                             ITEM_DO_SURF,
                                             ITEM_PH_SURF,
                                             ITEM_EC_SURF,
                                             ITEM_DOW_LOW,
                                             ITEM_TEMP_LOW,
                                             ITEM_DO_LOW,
                                             ITEM_PH_LOW,
                                             ITEM_EC_LOW,
                                             ITEM_TRANSPARENCY,
                                             ITEM_FSD,
                                             ITEM_FST,
                                             ITEM_FCL,
                                             ITEM_WTC,
                                             ITEM_PCA,
                                             ITEM_COD,
                                             ITEM_TOC,
                                             ITEM_TN,
                                             ITEM_TP,
                                             ITEM_SRP,
                                             ITEM_PB,
                                             ITEM_ZN,
                                             ITEM_CU,
                                             ITEM_CR,
                                             ITEM_NI,
                                             ITEM_AS,
                                             ITEM_CD,
                                             ITEM_HG,
                                             ITEM_AL,
                                             ITEM_LI,
                                             ITEM_CL_2_PHENYL,
                                             ITEM_2_CL_2_PHENYL,
                                             ITEM_3_CL_2_PHENYL,
                                             ITEM_4_CL_2_PHENYL,
                                             ITEM_5_CL_2_PHENYL,
                                             ITEM_6_CL_2_PHENYL,
                                             ITEM_7_CL_2_PHENYL,
                                             ITEM_8_CL_2_PHENYL,
                                             ITEM_9_CL_2_PHENYL,
                                             ITEM_10_CL_2_PHENYL,
                                             ITEM_TOT_PCBS,
                                             ITEM_NAPTHALENE,
                                             ITEM_ACENAPTHALENE,
                                             ITEM_ACENAPTHENE,
                                             ITEM_FLUORENE,
                                             ITEM_PHENANTHRENE,
                                             ITEM_ANTHRACENE,
                                             ITEM_FLUORANTHENE,
                                             ITEM_PYRENE,
                                             ITEM_BENZO_A_ANTHRACENE,
                                             ITEM_CRYSENE,
                                             ITEM_BENZO_B_FLUORANTHENE,
                                             ITEM_BENZO_F_FLUORANTHENE,
                                             ITEM_BENZO_A_PYRENE,
                                             ITEM_INDENO_1_2_3_CD_PYRENE,
                                             ITEM_DIBENZO_A_H_ANTHRACENE,
                                             ITEM_BENZO_G_H_I_PERYLENE,
                                             ITEM_TOTAL_PAHS,
                                             ITEM_O_P_DDE,
                                             ITEM_P_P_DDE,
                                             ITEM_O_P_DDD,
                                             ITEM_P_P_DDD,
                                             ITEM_O_P_DDT,
                                             ITEM_P_P_DDT,
                                             ITEM_TOTAL_DDT,
                                             ITEM_1_1_1_TRICHLOROETHANE,
                                             ITEM_1_2_DICHLOROETHANE,
                                             ITEM_BENZENE,
                                             ITEM_CARBON_TETRA_CHLORIDE,
                                             ITEM_CHLOROFORM,
                                             ITEM_ETHYL_BENZENE,
                                             ITEM_METHYL_CHLORIDE,
                                             ITEM_TETRA_CHLORO_ETHYLENE,
                                             ITEM_TRI_CHLORO_ETHYLENE,
                                             ITEM_TOLUENE,
                                             ITEM_M_P_XYLENE,
                                             ITEM_O_XYLENE
                                        FROM SDM_RWMDTI A, SDM_RWMPT B
                                       WHERE     A.PT_NO = B.PT_NO
                                             AND WMYR || WMOD >= #{startYear} || #{startMonth} 
                                             AND WMYR || WMOD <![CDATA[  <= #{endYear} || #{endMonth}  ]]>
                                             AND A.PT_NO IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
                                                                                  )
                                     AA
                               WHERE ROW_NUM  <![CDATA[ <= 1  ]]>
                            ORDER BY PT_NO, WMYR ASC, WMOM ASC) A,
                           (  SELECT *
                                FROM (SELECT ROW_NUMBER ()
                                                OVER (
                                                   PARTITION BY A.PT_NO
                                                   ORDER BY
                                                      A.PT_NO, WMYR ASC, WMOM ASC)
                                                AS ROW_NUM,
                                             A.PT_NO,
                                             B.PT_NM,
                                             WMYR,
                                             WMWK,
                                             WMOM,
                                             WMOD,
                                             ITEM_DOW                --최고수심(m)
                                                     ,
                                             ITEM_DOW_SURF       --표층-측정 수심(m)
                                                          ,
                                             ITEM_TEMP_SURF         --표층-수온(℃)
                                                           ,
                                             ITEM_DO_SURF         --표층-DO(㎎/L)
                                                         ,
                                             ITEM_PH_SURF              --표층 pH
                                                         ,
                                             ITEM_EC_SURF --표층 전기전도도(25℃ μS/㎝)
                                                         ,
                                             ITEM_DOW_LOW        --저층-측정 수심(m)
                                                         ,
                                             ITEM_TEMP_LOW          --저층 수온(℃)
                                                          ,
                                             ITEM_DO_LOW          --저층 DO(㎎/L)
                                                        ,
                                             ITEM_PH_LOW               --저층 pH
                                                        ,
                                             ITEM_EC_LOW  --저층 전기전도도(25℃ μS/㎝)
                                                        ,
                                             ITEM_TRANSPARENCY        --투명도(m)
                                                              ,
                                             ITEM_FSD               --입도-모래(%)
                                                     ,
                                             ITEM_FST               --입도-실트(%)
                                                     ,
                                             ITEM_FCL               --입도-점토(%)
                                                     ,
                                             ITEM_WTC                 --함수율(%)
                                                     ,
                                             ITEM_PCA             --완전연소가능량(%)
                                                     ,
                                             ITEM_COD                 --COD(%)
                                                     ,
                                             ITEM_TOC                 --TOC(%)
                                                     ,
                                             ITEM_TN                --T-N(㎎/㎏)
                                                    ,
                                             ITEM_TP                --T-P(㎎/㎏)
                                                    ,
                                             ITEM_SRP               --SRP(㎎/㎏)
                                                     ,
                                             ITEM_PB                 --Pb(㎎/㎏)
                                                    ,
                                             ITEM_ZN                 --Zn(㎎/㎏)
                                                    ,
                                             ITEM_CU                 --Cu(㎎/㎏)
                                                    ,
                                             ITEM_CR                 --Cr(㎎/㎏)
                                                    ,
                                             ITEM_NI                 --Ni(㎎/㎏)
                                                    ,
                                             ITEM_AS                 --As(㎎/㎏)
                                                    ,
                                             ITEM_CD                 --Cd(㎎/㎏)
                                                    ,
                                             ITEM_HG                 --Hg(㎎/㎏)
                                                    ,
                                             ITEM_AL                   --Al(%)
                                                    ,
                                             ITEM_LI                 --Li(㎎/㎏)
                                                    ,
                                             ITEM_CL_2_PHENYL --Chlorobiphenyl(㎍/㎏)
                                                             ,
                                             ITEM_2_CL_2_PHENYL --Dichlorobiphenyl(㎍/㎏)
                                                               ,
                                             ITEM_3_CL_2_PHENYL --Trichlorobiphenyl(㎍/㎏)
                                                               ,
                                             ITEM_4_CL_2_PHENYL --Tetrachlorobiphenyl(㎍/㎏)
                                                               ,
                                             ITEM_5_CL_2_PHENYL --Pentachlorobiphenyl(㎍/㎏)
                                                               ,
                                             ITEM_6_CL_2_PHENYL --Hexachlorobiphenyl(㎍/㎏)
                                                               ,
                                             ITEM_7_CL_2_PHENYL --Heptachlorobiphenyl(㎍/㎏)
                                                               ,
                                             ITEM_8_CL_2_PHENYL --Octachlorobiphenyl(㎍/㎏)
                                                               ,
                                             ITEM_9_CL_2_PHENYL --Nonachlorobiphenyl(㎍/㎏)
                                                               ,
                                             ITEM_10_CL_2_PHENYL --Decachlorobiphenyl(㎍/㎏)
                                                                ,
                                             ITEM_TOT_PCBS   --Total PCBs(㎍/㎏)
                                                          ,
                                             ITEM_NAPTHALENE --Naphthalene(㎍/㎏)
                                                            ,
                                             ITEM_ACENAPTHALENE --Acenaphthylene(㎍/㎏)
                                                               ,
                                             ITEM_ACENAPTHENE --Acenaphthene(㎍/㎏)
                                                             ,
                                             ITEM_FLUORENE     --Fluorene(㎍/㎏)
                                                          ,
                                             ITEM_PHENANTHRENE --Phenanthrene(㎍/㎏)
                                                              ,
                                             ITEM_ANTHRACENE --Anthracene(㎍/㎏)
                                                            ,
                                             ITEM_FLUORANTHENE --Fluoranthene(㎍/㎏)
                                                              ,
                                             ITEM_PYRENE         --Pyrene(㎍/㎏)
                                                        ,
                                             ITEM_BENZO_A_ANTHRACENE --Benzo[a]anthracene(㎍/㎏)
                                                                    ,
                                             ITEM_CRYSENE      --Chrysene(㎍/㎏)
                                                         ,
                                             ITEM_BENZO_B_FLUORANTHENE --Benzo[b]fluoranthene(㎍/㎏)
                                                                      ,
                                             ITEM_BENZO_F_FLUORANTHENE --Benzo[k]fluoranthene(㎍/㎏)
                                                                      ,
                                             ITEM_BENZO_A_PYRENE --Benzo[a]pyrene(㎍/㎏)
                                                                ,
                                             ITEM_INDENO_1_2_3_CD_PYRENE --Indeno[1,2,3-cd]pyrene(㎍/㎏)
                                                                        ,
                                             ITEM_DIBENZO_A_H_ANTHRACENE --Dibenzo[a,h]anthracene(㎍/㎏)
                                                                        ,
                                             ITEM_BENZO_G_H_I_PERYLENE --Benzo[g,h,i]perylene(㎍/㎏)
                                                                      ,
                                             ITEM_TOTAL_PAHS --Total PAHs(㎍/㎏)
                                                            ,
                                             ITEM_O_P_DDE      --o,p'-DDE(㎍/㎏)
                                                         ,
                                             ITEM_P_P_DDE      --p,p'-DDE(㎍/㎏)
                                                         ,
                                             ITEM_O_P_DDD      --o,p'-DDD(㎍/㎏)
                                                         ,
                                             ITEM_P_P_DDD      --p,p'-DDD(㎍/㎏)
                                                         ,
                                             ITEM_O_P_DDT      --o,p'-DDT(㎍/㎏)
                                                         ,
                                             ITEM_P_P_DDT      --p,p'-DDT(㎍/㎏)
                                                         ,
                                             ITEM_TOTAL_DDT  --Total DDTs(㎍/㎏)
                                                           ,
                                             ITEM_1_1_1_TRICHLOROETHANE --1,1,1-Trichloroethane(㎍/㎏)
                                                                       ,
                                             ITEM_1_2_DICHLOROETHANE --1,2-Dichloroethane(㎍/㎏)
                                                                    ,
                                             ITEM_BENZENE       --Benzene(㎍/㎏)
                                                         ,
                                             ITEM_CARBON_TETRA_CHLORIDE --Carbon tetrachloride(㎍/㎏)
                                                                       ,
                                             ITEM_CHLOROFORM --Chloroform(㎍/㎏)
                                                            ,
                                             ITEM_ETHYL_BENZENE --Ethylbenzene(㎍/㎏)
                                                               ,
                                             ITEM_METHYL_CHLORIDE --Methyl Chloride(㎍/㎏)
                                                                 ,
                                             ITEM_TETRA_CHLORO_ETHYLENE --Tetrachloroethylene(㎍/㎏)
                                                                       ,
                                             ITEM_TRI_CHLORO_ETHYLENE --Trichloroethylene(㎍/㎏)
                                                                     ,
                                             ITEM_TOLUENE       --Toluene(㎍/㎏)
                                                         ,
                                             ITEM_M_P_XYLENE --m,p-Xylene(㎍/㎏)
                                                            ,
                                             ITEM_O_XYLENE     --o-Xylene(㎍/㎏)
                                        FROM SDM_RWMDTI A, SDM_RWMPT B
                                       WHERE     A.PT_NO = B.PT_NO
                                             AND WMYR || WMOD <![CDATA[ <= #{endYear} || #{endMonth} ]]> -- 종료일자
                                             AND A.PT_NO IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach> -- 지점코드
                                                                                  )
                               WHERE ROW_NUM <![CDATA[ <= 10 ]]>
                            ORDER BY PT_NO, WMYR ASC, WMOM ASC) B
                     WHERE A.PT_NO(+) = B.PT_NO) A
          ORDER BY B_PT_NO, B_WMYR ASC, B_WMOM ASC)
GROUP BY RN,
         PT_NO,
         PT_NM,
         WMYR,
         WMWK,
         WMOM,
         WMOD,
         WMCYMD_VAL,
         WMCTM,
         POLL_STEP,
         CURR_DOW,
         CURR_DOW_SURF,
         CURR_TEMP_SURF,
         CURR_DO_SURF,
         CURR_PH_SURF,
         CURR_EC_SURF,
         CURR_DOW_LOW,
         CURR_TEMP_LOW,
         CURR_DO_LOW,
         CURR_PH_LOW,
         CURR_EC_LOW,
         CURR_TRANSPARENCY,
         CURR_FSD,
         CURR_FST,
         CURR_FCL,
         CURR_WTC,
         CURR_PCA,
         CURR_COD,
         CURR_TOC,
         CURR_TN,
         CURR_TP,
         CURR_SRP,
         CURR_PB,
         CURR_ZN,
         CURR_CU,
         CURR_CR,
         CURR_NI,
         CURR_AS,
         CURR_CD,
         CURR_HG,
         CURR_AL,
         CURR_LI,
         CURR_CL_2_PHENYL,
         CURR_2_CL_2_PHENYL,
         CURR_3_CL_2_PHENYL,
         CURR_4_CL_2_PHENYL,
         CURR_5_CL_2_PHENYL,
         CURR_6_CL_2_PHENYL,
         CURR_7_CL_2_PHENYL,
         CURR_8_CL_2_PHENYL,
         CURR_9_CL_2_PHENYL,
         CURR_10_CL_2_PHENYL,
         CURR_TOT_PCBS,
         CURR_NAPTHALENE,
         CURR_ACENAPTHALENE,
         CURR_ACENAPTHENE,
         CURR_FLUORENE,
         CURR_PHENANTHRENE,
         CURR_ANTHRACENE,
         CURR_FLUORANTHENE,
         CURR_PYRENE,
         CURR_BENZO_A_ANTHRACENE,
         CURR_CRYSENE,
         CURR_BENZO_B_FLUORANTHENE,
         CURR_BENZO_F_FLUORANTHENE,
         CURR_BENZO_A_PYRENE,
         CURR_INDENO_1_2_3_CD_PYRENE,
         CURR_DIBENZO_A_H_ANTHRACENE,
         CURR_BENZO_G_H_I_PERYLENE,
         CURR_TOTAL_PAHS,
         CURR_O_P_DDE,
         CURR_P_P_DDE,
         CURR_O_P_DDD,
         CURR_P_P_DDD,
         CURR_O_P_DDT,
         CURR_P_P_DDT,
         CURR_TOTAL_DDT,
         CURR_1_1_1_TRICHLOROETHANE,
         CURR_1_2_DICHLOROETHANE,
         CURR_BENZENE,
         CURR_CARBON_TETRA_CHLORIDE,
         CURR_CHLOROFORM,
         CURR_ETHYL_BENZENE,
         CURR_METHYL_CHLORIDE,
         CURR_TETRA_CHLORO_ETHYLENE,
         CURR_TRI_CHLORO_ETHYLENE,
         CURR_TOLUENE,
         CURR_M_P_XYLENE,
         CURR_O_XYLENE
ORDER BY RN
	
</select>    
    
<select id="searchResult_D_getDate" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
	<if test="gubun == 1">
		SELECT MAX(SUBSTR(TO_CHAR(YMDH, 'YYYYMMDDHH24'), 1, 8)) AS WMCYMD 
	      FROM WLDY 
		 WHERE WLOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
	</if>
	<if test="gubun == 2">
		SELECT SUBSTR (MAX(YMD), 1, 4)|| '.'|| SUBSTR (MAX(YMD), 5, 2)|| '.'|| SUBSTR (MAX(YMD), 7, 2) AS WMCYMD  
	      FROM RFDY 
		 WHERE RFOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
	<if test="gubun == 3">
		SELECT MAX(TO_CHAR(YMDH, 'YYYY.MM.DD')) AS WMCYMD 
		  FROM FWDY 
		 WHERE WLOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
	<if test="gubun == 4">
		SELECT MAX(SUBSTR(YMD,1,8)) AS WMCYMD 
		  FROM DMDY 
		 WHERE DMOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
	<if test="gubun == 5">
		SELECT MAX(TM) AS WMCYMD 
		  FROM WTAWSMST 
		 WHERE STNID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
	<if test="gubun == 6">
		SELECT MAX(SUBSTR(TM,1,8)) AS WMCYMD 
		  FROM RNDY 
		 WHERE STN_ID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
	<if test="gubun == 7">
		SELECT MAX(YMDHM) AS WMCYMD 
		  FROM BOMST 
		 WHERE BOOBSCD IN  <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
</select>    
    
<!-- 기타측정지점 - 수위관측소 GROUT CODE : D / LAYER CODE : D001 -->
<select id="searchResult_D_1" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
  SELECT /* KRF-BIZ.SearchResultMapper.searchResult_D_1 */
         RN,
         WS_NM,
         AM_NM,
         AS_NM,
         PT_NO,
         PT_NM,
         WMCYMD,
         CURR_WL,
         CURR_MXWL,
         CURR_MNWL,
         '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(b_WMCYMD,'.','') || '","',TRIM(' ' FROM   WL) || '"]') ORDER BY b_wmcymd).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_WL,
         '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(b_WMCYMD,'.','') || '","',TRIM(' ' FROM MXWL) || '"]') ORDER BY b_WMCYMD).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_MXWL,
         '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(b_WMCYMD,'.','') || '","',TRIM(' ' FROM MNWL) || '"]') ORDER BY b_WMCYMD).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[ '&'||'quot;' ]]>, '"') ||']' AS CHART_MNWL
	    FROM (SELECT A.RN,
			         A.WS_NM,
			         A.AM_NM,
			         A.AS_NM,
			         A.PT_NO,
			         A.PT_NM,
			         A.WMCYMD AS WMCYMD,
			         A.WL AS CURR_WL,
			         A.MXWL AS CURR_MXWL,
			         A.MNWL AS CURR_MNWL,
			         B.WMCYMD AS B_WMCYMD,
                   	 B.WL,
                     B.MNWL,
                     B.MXWL,
                     RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY  B.WMCYMD ASC) AS RN2
			    FROM (SELECT RANK () OVER (PARTITION BY WLOBSCD ORDER BY WLOBSCD, WMCYMD DESC) AS RN,
			                 SUBSTR (WMCYMD, 1, 4)|| '.'|| SUBSTR (WMCYMD, 5, 2)|| '.'|| SUBSTR (WMCYMD, 7, 2) AS WMCYMD,
			                 WLOBSCD AS PT_NO,
			                 OBSNM AS PT_NM,
			                 WS_NM,
			                 AM_NM,
			                 AS_NM,
			                 TO_CHAR (WL, '999G999G999G990D00') AS WL,
			                 TO_CHAR (MXWL, '999G999G999G990D00') AS MXWL,
			                 TO_CHAR (MNWL, '999G999G999G990D00') AS MNWL
			            FROM (  SELECT SUBSTR (TO_CHAR (YMDH, 'YYYYMMDDHH24'), 1, 8)  AS WMCYMD,
			                           A.WLOBSCD,
			                           OBSNM,
			                           MAX (ADM_CD) ADM_CD,
			                           ROUND (AVG (WL) / 1, 2) WL,
			                           ROUND (AVG (MXWL) / 1, 2) MXWL,
			                           ROUND (AVG (MNWL) / 1, 2) MNWL
			                      FROM WLDY A, WLOBSIF D
			                     WHERE A.WLOBSCD = D.WLOBSCD
			                           AND SUBSTR (TO_CHAR (A.ymdh, 'YYYYMMDDHH24'), 1, 6) <![CDATA[ >= ]]> #{startYear}||#{startMonth}
			                           AND SUBSTR (TO_CHAR (A.ymdh, 'YYYYMMDDHH24'), 1, 6) <![CDATA[ <=  ]]> #{endYear}||#{endMonth}
			                           AND A.WLOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	
			                  GROUP BY SUBSTR (TO_CHAR (YMDH, 'YYYYMMDDHH24'), 1, 8),
			                           A.WLOBSCD,
			                           OBSNM) A,
			                 KESTI_WATER_ALL_MAP B,
			                 COM_DISTRICT_RAW C
			           WHERE A.ADM_CD = B.ADM_CD AND A.ADM_CD = C.ADM_CD) A,
			         (SELECT RANK () OVER (PARTITION BY WLOBSCD ORDER BY WLOBSCD, WMCYMD DESC)AS RN,
			                 SUBSTR (WMCYMD, 1, 4) || '.'|| SUBSTR (WMCYMD, 5, 2)|| '.'|| SUBSTR (WMCYMD, 7, 2)AS WMCYMD,
			                 WLOBSCD AS PT_NO,
			                 OBSNM AS PT_NM,
			                 WS_NM,
			                 AM_NM,
			                 AS_NM,
			                 TO_CHAR (WL, '999G999G999G990D00') AS WL,
			                 TO_CHAR (MXWL, '999G999G999G990D00') AS MXWL,
			                 TO_CHAR (MNWL, '999G999G999G990D00') AS MNWL
			            FROM (  SELECT SUBSTR (TO_CHAR (YMDH, 'YYYYMMDDHH24'), 1, 8) AS WMCYMD,
			                           A.WLOBSCD,
			                           OBSNM,
			                           MAX (ADM_CD) ADM_CD,
			                           ROUND (AVG (WL) / 1, 2) WL,
			                           ROUND (AVG (MXWL) / 1, 2) MXWL,
			                           ROUND (AVG (MNWL) / 1, 2) MNWL
			                      FROM WLDY A, WLOBSIF D
			                     WHERE A.WLOBSCD = D.WLOBSCD
			                           AND SUBSTR (TO_CHAR (A.ymdh, 'YYYYMMDDHH24'), 1, 6) <![CDATA[ >=  ]]>   TO_CHAR (TO_DATE (#{startYear}||#{startMonth}, 'YYYYMM') - 35, 'YYYYMM')
			                           AND SUBSTR (TO_CHAR (A.ymdh, 'YYYYMMDDHH24'), 1, 6) <![CDATA[ <=   ]]> #{endYear}||#{endMonth}
			                           AND A.WLOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	
			                  GROUP BY SUBSTR (TO_CHAR (YMDH, 'YYYYMMDDHH24'), 1, 8),
			                           A.WLOBSCD,
			                           OBSNM) A,
			                 KESTI_WATER_ALL_MAP B,
			                 COM_DISTRICT_RAW C
			           WHERE A.ADM_CD = B.ADM_CD AND A.ADM_CD = C.ADM_CD) B
			   WHERE A.PT_NO = B.PT_NO AND A.RN BETWEEN B.RN - 4 AND B.RN
		ORDER BY A.PT_NO, A.WMCYMD DESC)
GROUP BY RN,
         WS_NM,
         AM_NM,
         AS_NM,
         PT_NO,
         PT_NM,
         WMCYMD,
         CURR_WL,
         CURR_MXWL,
         CURR_MNWL
ORDER BY PT_NO, WMCYMD DESC
</select>

<!-- 기타측정지점 - 우량관측소 GROUT CODE : D / LAYER CODE : D002 -->
<select id="searchResult_D_2" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
  SELECT /* KRF-BIZ.SearchResultMapper.searchResult_D_2 */
         RN,
         WS_NM,
         AM_NM,
         AS_NM,
         PT_NO,
         PT_NM,
         WMCYMD,
         CURR_RF,
         '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_RF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_RF
    FROM (  SELECT A.RN,
                   A.WS_NM,
                   A.AM_NM,
                   A.AS_NM,
                   A.PT_NO,
                   A.PT_NM,
                   A.WMCYMD,
                   B.WMCYMD AS CHART_DATE,
                   A.RF AS CURR_RF,
                   B.RF AS CHART_RF,
                   RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY B.WMCYMD ASC) AS RN2
              FROM (SELECT RANK ()
                           OVER (PARTITION BY RFOBSCD ORDER BY RFOBSCD, YMD DESC)
                              AS RN,
                           RFOBSCD AS PT_NO,
                           YMD AS WMCYMD,
                           WS_NM,
                           AM_NM,
                           AS_NM,
                           OBSNM AS PT_NM,
                           RF
                      FROM (  SELECT    SUBSTR (YMD, 1, 4)
                                     || '.'
                                     || SUBSTR (YMD, 5, 2)
                                     || '.'
                                     || SUBSTR (YMD, 7, 2)
                                        AS YMD,
                                     A.RFOBSCD,
                                     OBSNM,
                                     MAX (ADM_CD) ADM_CD,
                                     ROUND (SUM (RF) / 1, 3) RF
                                FROM RFDY A, RFOBSIF D
                               WHERE A.RFOBSCD = D.RFOBSCD
                            GROUP BY YMD, A.RFOBSCD, D.OBSNM
                            ORDER BY YMD, A.RFOBSCD, D.OBSNM) A,
                           KESTI_WATER_ALL_MAP B,
                           COM_DISTRICT_RAW C
                     WHERE A.ADM_CD = B.ADM_CD AND A.ADM_CD = C.ADM_CD) A,
                   (SELECT RANK ()
                           OVER (PARTITION BY RFOBSCD ORDER BY RFOBSCD, YMD DESC)
                              AS RN,
                           RFOBSCD AS PT_NO,
                           YMD AS WMCYMD,
                           WS_NM,
                           AM_NM,
                           AS_NM,
                           OBSNM AS PT_NM,
                           RF
                      FROM (  SELECT    SUBSTR (YMD, 1, 4)
                                     || '.'
                                     || SUBSTR (YMD, 5, 2)
                                     || '.'
                                     || SUBSTR (YMD, 7, 2)
                                        AS YMD,
                                     A.RFOBSCD,
                                     OBSNM,
                                     MAX (ADM_CD) ADM_CD,
                                     ROUND (SUM (RF) / 1, 3) RF
                                FROM RFDY A, RFOBSIF D
                               WHERE A.RFOBSCD = D.RFOBSCD
                            GROUP BY YMD, A.RFOBSCD, D.OBSNM
                            ORDER BY YMD, A.RFOBSCD, D.OBSNM) A,
                           KESTI_WATER_ALL_MAP B,
                           COM_DISTRICT_RAW C
                     WHERE A.ADM_CD = B.ADM_CD AND A.ADM_CD = C.ADM_CD) B
             WHERE     A.PT_NO = B.PT_NO
                   AND A.RN BETWEEN B.RN - 4 AND B.RN
                   AND SUBSTR (A.WMCYMD, 1, 4) || SUBSTR (A.WMCYMD, 6, 2) BETWEEN #{startYear} || #{startMonth} AND #{endYear} || #{endMonth}
                   AND A.PT_NO IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
          ORDER BY A.PT_NO, A.WMCYMD DESC, B.WMCYMD)
GROUP BY RN,
         WS_NM,
         AM_NM,
         AS_NM,
         PT_NO,
         PT_NM,
         WMCYMD,
         CURR_RF
ORDER BY PT_NO, WMCYMD DESC
</select>    

<!-- 기타측정지점 - 유량관측소 GROUT CODE : D / LAYER CODE : D003 -->
<select id="searchResult_D_3" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
SELECT /* KRF-BIZ.SearchResultMapper.searchResult_D_3 */
       RN,  
       WS_NM,  
       AM_NM,  
       AS_NM,  
       PT_NO,  
       PT_NM,  
       WMCYMD,  
       CURR_FW,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_FW         
	     FROM (
				SELECT A.RN,  
				       A.WS_NM,  
				       A.AM_NM,  
				       A.AS_NM,  
				       A.PT_NO,  
				       A.PT_NM,  
				       A.WMCYMD,  
				       B.WMCYMD AS CHART_DATE,  
				       A.FW     AS CURR_FW,  
				       B.FW     AS CHART_FW,  
				       RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY B.WMCYMD ASC) AS RN2
				FROM   (SELECT RANK() 
				                 OVER( 
				                   PARTITION BY WLOBSCD 
				                   ORDER BY WLOBSCD, WMCYMD DESC) AS RN, 
				               WMCYMD, 
				               WLOBSCD                            AS PT_NO, 
				               OBSNM                              AS PT_NM, 
				               FW, 
				               B.WS_NM, 
				               B.AM_NM, 
				               B.AS_NM 
				        FROM   (SELECT TO_CHAR(YMDH, 'YYYY.MM.DD') WMCYMD, 
				                       A.WLOBSCD, 
				                       OBSNM, 
				                       MAX(ADM_CD)                 ADM_CD, 
				                       ROUND(AVG(FW) / 1, 4)       FW 
				                FROM   FWDY A, 
				                       FWOBSIF D 
				                WHERE  A.WLOBSCD = D.FWOBSCD 
				                       AND SUBSTR(TO_CHAR(A.YMDH, 'YYYYMMDD'), 1, 6) >= #{startYear} || #{startMonth}
				                       AND SUBSTR(TO_CHAR(A.YMDH, 'YYYYMMDD'), 1, 6) <![CDATA[ <=   ]]> #{endYear} || #{endMonth}
				                       AND A.WLOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	
				                GROUP  BY TO_CHAR(YMDH, 'YYYY.MM.DD'), 
				                          A.WLOBSCD, 
				                          OBSNM) A, 
				               KESTI_WATER_ALL_MAP B, 
				               COM_DISTRICT_RAW C 
				        WHERE  A.ADM_CD = B.ADM_CD 
				               AND A.ADM_CD = C.ADM_CD) A, 
				       (SELECT RANK() 
				                 OVER( 
				                   PARTITION BY WLOBSCD 
				                   ORDER BY WLOBSCD, WMCYMD DESC) AS RN, 
				               WMCYMD, 
				               WLOBSCD                            AS PT_NO, 
				               OBSNM                              AS PT_NM, 
				               FW, 
				               B.WS_NM, 
				               B.AM_NM, 
				               B.AS_NM 
				        FROM   (SELECT TO_CHAR(YMDH, 'YYYY.MM.DD') WMCYMD, 
				                       A.WLOBSCD, 
				                       OBSNM, 
				                       MAX(ADM_CD)                 ADM_CD, 
				                       ROUND(AVG(FW) / 1, 4)       FW 
				                FROM   FWDY A, 
				                       FWOBSIF D 
				                WHERE  A.WLOBSCD = D.FWOBSCD 
				                       AND SUBSTR(TO_CHAR(A.YMDH, 'YYYYMMDD'), 1, 6) >= TO_CHAR( TO_DATE(#{startYear} || #{startMonth}, 'YYYYMM') - 35, 'YYYYMM') 
				                       AND SUBSTR(TO_CHAR(A.YMDH, 'YYYYMMDD'), 1, 6) <![CDATA[ <=  ]]> #{endYear} || #{endMonth}
				                       AND A.WLOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
				                GROUP  BY A.WLOBSCD, 
				                          TO_CHAR(YMDH, 'YYYY.MM.DD'), 
				                          OBSNM) A, 
				               KESTI_WATER_ALL_MAP B, 
				               COM_DISTRICT_RAW C 
				        WHERE  A.ADM_CD = B.ADM_CD 
				               AND A.ADM_CD = C.ADM_CD) B 
				WHERE  A.PT_NO = B.PT_NO 
				       AND A.RN BETWEEN B.RN - 4 AND B.RN 
				ORDER  BY A.PT_NO, A.WMCYMD DESC,B.WMCYMD )
GROUP BY RN,  
         WS_NM,  
         AM_NM,  
         AS_NM,  
         PT_NO,  
         PT_NM,  
         WMCYMD,
         CURR_FW   
ORDER BY PT_NO, WMCYMD DESC
</select>

<!-- 기타측정지점 - 댐관측소 GROUT CODE : D / LAYER CODE : D004 -->
<select id="searchResult_D_4" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
SELECT /* KRF-BIZ.SearchResultMapper.searchResult_D_4 */
       RN,
       WS_NM, 
       AM_NM, 
       AS_NM, 
       PT_NO, 
       PT_NM, 
       WMCYMD, 
       CURR_SWL, 
       CURR_INF, 
       CURR_OTF, 
       CURR_SFW, 
       CURR_ECPC,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_SWL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_SWL,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_INF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_INF,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_OTF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_OTF,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_SFW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_SFW,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ECPC) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_ECPC
       FROM (   SELECT A.RN, 
				       A.WS_NM, 
				       A.AM_NM, 
				       A.AS_NM, 
				       A.PT_NO, 
				       A.PT_NM, 
				       A.WMCYMD, 
				       B.WMCYMD AS CHART_DATE, 
				       A.SWL    AS CURR_SWL, 
				       B.SWL    AS CHART_SWL, 
				       A.INF    AS CURR_INF, 
				       B.INF    AS CHART_INF, 
				       A.OTF    AS CURR_OTF, 
				       B.OTF    AS CHART_OTF, 
				       A.SFW    AS CURR_SFW, 
				       B.SFW    AS CHART_SFW, 
				       A.ECPC   AS CURR_ECPC, 
				       B.ECPC   AS CHART_ECPC, 
				       RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY B.WMCYMD ASC) AS RN2
				FROM   (SELECT RANK() 
				                 OVER( 
				                   PARTITION BY DMOBSCD 
				                   ORDER BY DMOBSCD, WMCYMD DESC) AS RN, 
				               B.WS_NM, 
				               B.AM_NM, 
				               B.AS_NM, 
				               DMOBSCD                            AS PT_NO, 
				               OBSNM                              AS PT_NM, 
				               WMCYMD, 
				               SWL, 
				               INF, 
				               OTF, 
				               SFW, 
				               ECPC 
				        FROM   (SELECT SUBSTR(YMD, 1, 4) 
				                       ||'.' 
				                       ||SUBSTR(YMD, 5, 2) 
				                       ||'.' 
				                       ||SUBSTR(YMD, 7, 2)      AS WMCYMD, 
				                       A.DMOBSCD, 
				                       OBSNM, 
				                       MAX(ADM_CD)              ADM_CD, 
				                       ROUND(AVG(A.SWL) / 1, 3) SWL, 
				                       ROUND(AVG(INF) / 1, 3)   INF, 
				                       ROUND(AVG(OTF) / 1, 3)   OTF, 
				                       ROUND(AVG(SFW) / 1, 3)   SFW, 
				                       ROUND(AVG(ECPC) / 1, 3)  ECPC 
				                FROM   DMDY A, 
				                       DMOBSIF D 
				                WHERE  A.DMOBSCD = D.DMOBSCD 
				                       AND SUBSTR(A.YMD, 1, 6) >= #{startYear} || #{startMonth} 
				                       AND SUBSTR(A.YMD, 1, 6) <![CDATA[ <= ]]> #{endYear} || #{endMonth}
				                       AND A.DMOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
				                GROUP  BY SUBSTR(YMD, 1, 4) 
				                          ||'.' 
				                          ||SUBSTR(YMD, 5, 2) 
				                          ||'.' 
				                          ||SUBSTR(YMD, 7, 2), 
				                          A.DMOBSCD, 
				                          OBSNM) A, 
				               KESTI_WATER_ALL_MAP B, 
				               COM_DISTRICT_RAW C 
				        WHERE  A.ADM_CD = B.ADM_CD 
				               AND A.ADM_CD = C.ADM_CD) A, 
				       (SELECT RANK() 
				                 OVER( 
				                   PARTITION BY DMOBSCD 
				                   ORDER BY DMOBSCD, WMCYMD DESC) AS RN, 
				               B.WS_NM, 
				               B.AM_NM, 
				               B.AS_NM, 
				               DMOBSCD                            AS PT_NO, 
				               OBSNM                              AS PT_NM, 
				               WMCYMD, 
				               SWL, 
				               INF, 
				               OTF, 
				               SFW, 
				               ECPC 
				        FROM   (SELECT SUBSTR(YMD, 1, 4) 
				                       ||'.' 
				                       ||SUBSTR(YMD, 5, 2) 
				                       ||'.' 
				                       ||SUBSTR(YMD, 7, 2)      AS WMCYMD, 
				                       A.DMOBSCD, 
				                       OBSNM, 
				                       MAX(ADM_CD)              ADM_CD, 
				                       ROUND(AVG(A.SWL) / 1, 3) SWL, 
				                       ROUND(AVG(INF) / 1, 3)   INF, 
				                       ROUND(AVG(OTF) / 1, 3)   OTF, 
				                       ROUND(AVG(SFW) / 1, 3)   SFW, 
				                       ROUND(AVG(ECPC) / 1, 3)  ECPC 
				                FROM   DMDY A, 
				                       DMOBSIF D 
				                WHERE  A.DMOBSCD = D.DMOBSCD 
				                       AND SUBSTR(A.YMD, 1, 6) >= #{startYear} || #{startMonth}
				                       AND SUBSTR(A.YMD, 1, 6) <![CDATA[ <= ]]> #{endYear} || #{endMonth} 
				                       AND A.DMOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
				                GROUP  BY SUBSTR(YMD, 1, 4) 
				                          ||'.' 
				                          ||SUBSTR(YMD, 5, 2) 
				                          ||'.' 
				                          ||SUBSTR(YMD, 7, 2), 
				                          A.DMOBSCD, 
				                          OBSNM) A, 
				               KESTI_WATER_ALL_MAP B, 
				               COM_DISTRICT_RAW C 
				        WHERE  A.ADM_CD = B.ADM_CD 
				          AND A.ADM_CD = C.ADM_CD) B 
				WHERE A.PT_NO = B.PT_NO 
				  AND A.RN BETWEEN B.RN - 4 AND B.RN 
				ORDER BY A.PT_NO, A.WMCYMD DESC, B.WMCYMD )
  GROUP BY RN,
	       WS_NM, 
	       AM_NM, 
	       AS_NM, 
	       PT_NO, 
	       PT_NM, 
	       WMCYMD, 
	       CURR_SWL, 
	       CURR_INF, 
	       CURR_OTF, 
	       CURR_SFW, 
	       CURR_ECPC
  ORDER BY PT_NO, WMCYMD DESC

</select>

<!-- 기타측정지점 - AWS기상관측소 GROUT CODE : D / LAYER CODE : D005 -->
<select id="searchResult_D_5" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
SELECT /* KRF-BIZ.SearchResultMapper.searchResult_D_5 */
       RN, 
       WS_NM, 
       AM_NM, 
       AS_NM, 
       PT_NO, 
       PT_NM, 
       WMCYMD, 
       CURR_WD, 
       CURR_WS, 
       CURR_TA, 
       CURR_HM, 
       CURR_PA, 
       CURR_PS, 
       CURR_RNYN, 
       CURR_RN1HR, 
       CURR_RNDAY, 
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_WD) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_WD,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_WS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_WS,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TA) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_TA,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_HM) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_HM,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PA) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_PA,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_PS) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_PS,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_RNYN) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_RNYN,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_RN1HR) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_RN1HR,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_RNDAY) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_RNDAY
       FROM (   SELECT A.RN, 
				       A.WS_NM, 
				       A.AM_NM, 
				       A.AS_NM, 
				       A.PT_NO, 
				       A.PT_NM, 
				       SUBSTR(A.WMCYMD, 1, 4) ||'.'||SUBSTR(A.WMCYMD, 5, 2)||'.'||SUBSTR(A.WMCYMD, 7, 2) AS WMCYMD, 
				       B.WMCYMD                 AS CHART_DATE, 
				       A.WD                     AS CURR_WD, 
				       B.WD                     AS CHART_WD, 
				       A.WS                     AS CURR_WS, 
				       B.WS                     AS CHART_WS, 
				       A.TA                     AS CURR_TA, 
				       B.TA                     AS CHART_TA, 
				       A.HM                     AS CURR_HM, 
				       B.HM                     AS CHART_HM, 
				       A.PA                     AS CURR_PA, 
				       B.PA                     AS CHART_PA, 
				       A.PS                     AS CURR_PS, 
				       B.PS                     AS CHART_PS, 
				       A.RNYN                   AS CURR_RNYN, 
				       B.RNYN                   AS CHART_RNYN, 
				       A.RN1HR                  AS CURR_RN1HR, 
				       B.RN1HR                  AS CHART_RN1HR, 
				       A.RNDAY                  AS CURR_RNDAY, 
				       B.RNDAY                  AS CHART_RNDAY,
				       RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY B.WMCYMD ASC) AS RN2
				FROM   (SELECT RANK() 
				                 OVER( 
				                   PARTITION BY STNID 
				                   ORDER BY STNID, WMCYMD DESC) AS RN, 
				               WS_NM, 
				               AM_NM, 
				               AS_NM, 
				               STNID                            AS PT_NO, 
				               OBSNM                            AS PT_NM, 
				               WMCYMD, 
				               WD, 
				               WS, 
				               TA, 
				               HM, 
				               PA, 
				               PS, 
				               RNYN, 
				               RN1HR, 
				               RNDAY 
				        FROM   (SELECT STNID, 
				                       OBSNM, 
				                       SUBSTR(TM, 1, 8)          AS WMCYMD, 
				                       ROUND(AVG(WD / 10), 2)    WD, 
				                       ROUND(AVG(WS / 10), 2)    WS, 
				                       ROUND(AVG(TA / 10), 2)    TA, 
				                       ROUND(AVG(HM), 2)         HM, 
				                       ROUND(AVG(PA), 2)         PA, 
				                       ROUND(AVG(PS), 2)         PS, 
				                       ROUND(AVG(RNYN), 2)       RNYN, 
				                       ROUND(AVG(RN1HR / 10), 2) RN1HR, 
				                       ROUND(AVG(RNDAY / 10), 2) RNDAY, 
				                       ROUND(AVG(RN15M), 2)      RN15M, 
				                       ROUND(AVG(RN60M), 2)      RN60M, 
				                       ROUND(AVG(WDINS), 2)      WDINS, 
				                       ROUND(AVG(WSINS), 2)      WSINS, 
				                       MAX(ADM_CD)               ADM_CD 
				                FROM   WTAWSMST A, 
				                       WTOBSIF B 
				                WHERE  A.STNID = B.WTOBSCD 
				                       AND A.STNID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
				                       AND SUBSTR(TM, 1, 6) >= #{startYear} || #{startMonth}
				                       AND SUBSTR(TM, 1, 6) <![CDATA[ <= ]]> #{endYear} || #{endMonth}
				                       AND B.OBSTCD = '2' 
				                GROUP  BY STNID, 
				                          OBSNM, 
				                          SUBSTR(TM, 1, 8)) A, 
				               KESTI_WATER_ALL_MAP C, 
				               COM_DISTRICT_RAW D 
				        WHERE  A.ADM_CD = C.ADM_CD 
				               AND A.ADM_CD = D.ADM_CD) A, 
				       (SELECT RANK() 
				                 OVER( 
				                   PARTITION BY STNID 
				                   ORDER BY STNID, WMCYMD DESC) AS RN, 
				               WS_NM, 
				               AM_NM, 
				               AS_NM, 
				               STNID                            AS PT_NO, 
				               OBSNM                            AS PT_NM, 
				               WMCYMD, 
				               WD, 
				               WS, 
				               TA, 
				               HM, 
				               PA, 
				               PS, 
				               RNYN, 
				               RN1HR, 
				               RNDAY 
				        FROM   (SELECT STNID, 
				                       OBSNM, 
				                       SUBSTR(TM, 1, 8)          AS WMCYMD, 
				                       ROUND(AVG(WD / 10), 2)    WD, 
				                       ROUND(AVG(WS / 10), 2)    WS, 
				                       ROUND(AVG(TA / 10), 2)    TA, 
				                       ROUND(AVG(HM), 2)         HM, 
				                       ROUND(AVG(PA), 2)         PA, 
				                       ROUND(AVG(PS), 2)         PS, 
				                       ROUND(AVG(RNYN), 2)       RNYN, 
				                       ROUND(AVG(RN1HR / 10), 2) RN1HR, 
				                       ROUND(AVG(RNDAY / 10), 2) RNDAY, 
				                       ROUND(AVG(RN15M), 2)      RN15M, 
				                       ROUND(AVG(RN60M), 2)      RN60M, 
				                       ROUND(AVG(WDINS), 2)      WDINS, 
				                       ROUND(AVG(WSINS), 2)      WSINS, 
				                       MAX(ADM_CD)               ADM_CD 
				                FROM   WTAWSMST A, 
				                       WTOBSIF B 
				                WHERE  A.STNID = B.WTOBSCD 
				                       AND A.STNID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
				                       AND SUBSTR(TM, 1, 6) >= TO_CHAR(TO_DATE(#{startYear} || #{startMonth}, 'YYYYMM') - 35,'YYYYMM') 
				                       AND SUBSTR(TM, 1, 6) <![CDATA[ <= ]]> #{endYear} || #{endMonth} 
				                       AND B.OBSTCD = '2' 
				                GROUP  BY STNID, 
				                          OBSNM, 
				                          SUBSTR(TM, 1, 8)) A, 
				               KESTI_WATER_ALL_MAP C, 
				               COM_DISTRICT_RAW D 
				        WHERE  A.ADM_CD = C.ADM_CD 
				          AND  A.ADM_CD = D.ADM_CD) B 
				WHERE A.PT_NO = B.PT_NO 
				  AND A.RN BETWEEN B.RN - 4 AND B.RN 
				ORDER BY A.PT_NO, A.WMCYMD DESC,B.WMCYMD)
 GROUP BY RN, 
	      WS_NM, 
	      AM_NM, 
	      AS_NM, 
	      PT_NO, 
	      PT_NM, 
	      WMCYMD, 
	      CURR_WD, 
	      CURR_WS, 
	      CURR_TA, 
	      CURR_HM, 
	      CURR_PA, 
	      CURR_PS, 
	      CURR_RNYN, 
	      CURR_RN1HR, 
	      CURR_RNDAY
 ORDER BY PT_NO, WMCYMD DESC

</select>

<!-- 기타측정지점 - 지상기상관측소 GROUT CODE : D / LAYER CODE : D006 -->
<select id="searchResult_D_6" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
SELECT /* KRF-BIZ.SearchResultMapper.searchResult_D_6 */
       RN, 
       WS_NM, 
       AM_NM, 
       AS_NM, 
       PT_NO, 
       PT_NM, 
       WMCYMD, 
       CURR_RND, 
       CURR_TA, 
       CURR_SIDAY,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_RND) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_RND,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TA) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_TA,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_SIDAY) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_SIDAY
  FROM (    SELECT A.RN, 
			       A.WS_NM, 
			       A.AM_NM, 
			       A.AS_NM, 
			       A.PT_NO, 
			       A.PT_NM, 
			       A.WMCYMD, 
			       B.WMCYMD AS CHART_DATE, 
			       A.RND    AS CURR_RND, 
			       B.RND    AS CHART_RND, 
			       A.TA     AS CURR_TA, 
			       B.TA     AS CHART_TA, 
			       A.SIDAY  AS CURR_SIDAY, 
			       B.SIDAY  AS CHART_SIDAY,
			       RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY B.WMCYMD ASC) AS RN2
			FROM   (SELECT RANK() 
			                 OVER( 
			                   PARTITION BY STNID 
			                   ORDER BY STNID, WMCYMD DESC) AS RN, 
			               WMCYMD, 
			               STNID                            AS PT_NO, 
			               WS_NM, 
			               AM_NM, 
			               AS_NM, 
			               OBSNM                            AS PT_NM, 
			               RND, 
			               TA, 
			               SIDAY 
			        FROM   (SELECT TM            AS WMCYMD, 
			                       E.OBSNMENG    AS STNID, 
			                       STN_NM        AS OBSNM, 
			                       MAX(D.ADM_CD) ADM_CD, 
			                       MAX(RN_DAY)   AS RND, 
			                       A.TA          AS TA, 
			                       A.SI_DAY      AS SIDAY 
			                FROM   RNDY A, 
			                       KESTI_RNDY_ST D, 
			                       WTOBSIF E 
			                WHERE  A.STN_ID = D.STN_ID 
			                       AND A.STN_ID = E.OBSNMENG 
			                       AND SUBSTR(A.TM, 1, 6) >= #{startYear} || #{startMonth}
			                       AND SUBSTR(A.TM, 1, 6) <![CDATA[ <= ]]> #{endYear} || #{endMonth}
			                       AND D.STN_ID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
			                GROUP  BY TM, 
			                          E.OBSNMENG, 
			                          STN_NM, 
			                          TA, 
			                          SI_DAY)A, 
			               KESTI_WATER_ALL_MAP B, 
			               COM_DISTRICT_RAW C 
			        WHERE  A.ADM_CD = B.ADM_CD 
			               AND A.ADM_CD = C.ADM_CD) A, 
			       (SELECT RANK() 
			                 OVER( 
			                   PARTITION BY STNID 
			                   ORDER BY STNID, WMCYMD DESC) AS RN, 
			               WMCYMD, 
			               STNID                            AS PT_NO, 
			               WS_NM, 
			               AM_NM, 
			               AS_NM, 
			               OBSNM                            AS PT_NM, 
			               RND, 
			               TA, 
			               SIDAY 
			        FROM   (SELECT TM            AS WMCYMD, 
			                       E.OBSNMENG    AS STNID, 
			                       STN_NM        AS OBSNM, 
			                       MAX(D.ADM_CD) ADM_CD, 
			                       MAX(RN_DAY)   AS RND, 
			                       A.TA          AS TA, 
			                       A.SI_DAY      AS SIDAY 
			                FROM   RNDY A, 
			                       KESTI_RNDY_ST D, 
			                       WTOBSIF E 
			                WHERE  A.STN_ID = D.STN_ID 
			                       AND A.STN_ID = E.OBSNMENG 
			                       AND SUBSTR(A.TM, 1, 6) >= TO_CHAR( TO_DATE(#{startYear} || #{startMonth}, 'YYYYMM') - 35, 'YYYYMM') 
			                       AND SUBSTR(A.TM, 1, 6) <![CDATA[ <= ]]> #{endYear} || #{endMonth}
			                       AND D.STN_ID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
			                GROUP  BY TM, 
			                          E.OBSNMENG, 
			                          STN_NM, 
			                          TA, 
			                          SI_DAY)A, 
			               KESTI_WATER_ALL_MAP B, 
			               COM_DISTRICT_RAW C 
			        WHERE  A.ADM_CD = B.ADM_CD 
			               AND A.ADM_CD = C.ADM_CD) B 
			WHERE  A.PT_NO = B.PT_NO 
			       AND A.RN BETWEEN B.RN - 4 AND B.RN 
			ORDER  BY A.PT_NO, A.WMCYMD DESC,B.WMCYMD)
  GROUP BY RN, 
	       WS_NM, 
	       AM_NM, 
	       AS_NM, 
	       PT_NO, 
	       PT_NM, 
	       WMCYMD, 
	       CURR_RND, 
	       CURR_TA, 
	       CURR_SIDAY  
 ORDER  BY PT_NO, WMCYMD DESC

</select>

<!-- 기타측정지점 - 보관측소 GROUT CODE : D / LAYER CODE : D007 -->
<select id="searchResult_D_7" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
SELECT /* KRF-BIZ.SearchResultMapper.searchResult_D_7 */
       RN, 
       WS_NM, 
       AM_NM, 
       AS_NM, 
       WMCYMD, 
       PT_NO, 
       PT_NM, 
       CURR_SWL, 
       CURR_OWL, 
       CURR_SFW, 
       CURR_ECPC, 
       CURR_INF, 
       CURR_TOTOTF, 
       CURR_EGOTF, 
       CURR_GTOTF, 
       CURR_CBOTF, 
       CURR_FWOTF, 
       CURR_ETCOTF, 
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_SWL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_SWL,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_OWL) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_OWL,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_SFW) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_SFW,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ECPC) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_ECPC,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_INF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_INF,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_TOTOTF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' ASCHART_TOTOTF,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_EGOTF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_EGOTF,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_GTOTF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_GTOTF,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_CBOTF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_CBOTF,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_FWOTF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_FWOTF,
       '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(CHART_DATE,'.','') || '","',TRIM(' ' FROM   CHART_ETCOTF) || '"]') ORDER BY CHART_DATE).EXTRACT ('//text()').GETSTRINGVAL (),2) ,  <![CDATA[ '&'||'quot;' ]]>  , '"') ||']' AS CHART_ETCOTF
 FROM(  SELECT A.RN, 
		       A.WS_NM, 
		       A.AM_NM, 
		       A.AS_NM, 
		       A.WMCYMD, 
		       B.WMCYMD AS CHART_DATE, 
		       A.PT_NO, 
		       A.PT_NM, 
		       A.SWL    AS CURR_SWL, 
		       B.SWL    AS CHART_SWL, 
		       A.OWL    AS CURR_OWL, 
		       B.OWL    AS CHART_OWL, 
		       A.SFW    AS CURR_SFW, 
		       B.SFW    AS CHART_SFW, 
		       A.ECPC   AS CURR_ECPC, 
		       B.ECPC   AS CHART_ECPC, 
		       A.INF    AS CURR_INF, 
		       B.INF    AS CHART_INF, 
		       A.TOTOTF AS CURR_TOTOTF, 
		       B.TOTOTF AS CHART_TOTOTF, 
		       A.EGOTF  AS CURR_EGOTF, 
		       B.EGOTF  AS CHART_EGOTF, 
		       A.GTOTF  AS CURR_GTOTF, 
		       B.GTOTF  AS CHART_GTOTF, 
		       A.CBOTF  AS CURR_CBOTF, 
		       B.CBOTF  AS CHART_CBOTF, 
		       A.FWOTF  AS CURR_FWOTF, 
		       B.FWOTF  AS CHART_FWOTF, 
		       A.ETCOTF AS CURR_ETCOTF, 
		       B.ETCOTF AS CHART_ETCOTF,
		       RANK () OVER (PARTITION BY A.RN, A.PT_NO ORDER BY B.WMCYMD ASC) AS RN2 
		FROM   (SELECT RANK() 
		                 OVER( 
		                   PARTITION BY BOOBSCD 
		                   ORDER BY BOOBSCD, WMCYMD DESC, WMCYMD_2 DESC) 
		                      AS RN, 
		               WS_NM, 
		               AM_NM, 
		               AS_NM, 
		               TO_CHAR(TO_DATE(WMCYMD||WMCYMD_2, 'YYYYMMDD HH24:MI'),'YYYY.MM.DD HH24:MI')AS WMCYMD, 
		               BOOBSCD 
		                      AS PT_NO, 
		               OBSNM 
		                      AS PT_NM, 
		               SWL, 
		               OWL, 
		               SFW, 
		               ECPC, 
		               INF, 
		               TOTOTF, 
		               EGOTF, 
		               GTOTF, 
		               CBOTF, 
		               FWOTF, 
		               ETCOTF 
		        FROM   (SELECT SUBSTR(A.YMDHM, 1, 6)     AS WMCYMD, 
		                       SUBSTR(A.YMDHM, 7, 6)     AS WMCYMD_2, 
		                       A.BOOBSCD, 
		                       OBSNM, 
		                       MAX(ADM_CD)               ADM_CD, 
		                       ROUND(AVG(SWL) / 1, 3)    SWL, 
		                       ROUND(AVG(OWL) / 1, 3)    OWL, 
		                       ROUND(AVG(SFW) / 1, 3)    SFW, 
		                       ROUND(AVG(ECPC) / 1, 3)   ECPC, 
		                       ROUND(AVG(INF) / 1, 3)    INF, 
		                       ROUND(AVG(TOTOTF) / 1, 3) TOTOTF, 
		                       ROUND(AVG(EGOTF) / 1, 3)  EGOTF, 
		                       ROUND(AVG(GTOTF) / 1, 3)  GTOTF, 
		                       ROUND(AVG(CBOTF) / 1, 3)  CBOTF, 
		                       ROUND(AVG(FWOTF) / 1, 3)  FWOTF, 
		                       ROUND(AVG(ETCOTF) / 1, 3) ETCOTF 
		                FROM   BOMST A, 
		                       BOOBSIF D 
		                WHERE  A.BOOBSCD = D.BOOBSCD 
		                       AND SUBSTR(A.YMDHM, 1, 6) <![CDATA[ >= ]]> #{startYear} || #{startMonth}
		                       AND SUBSTR(A.YMDHM, 1, 6) <![CDATA[ <= ]]> #{endYear} || #{endMonth}
		                       AND A.BOOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
		                GROUP  BY SUBSTR(A.YMDHM, 1, 6), 
		                          SUBSTR(A.YMDHM, 7, 6), 
		                          A.BOOBSCD, 
		                          OBSNM) A, 
		               KESTI_WATER_ALL_MAP B, 
		               COM_DISTRICT_RAW C 
		        WHERE  A.ADM_CD = B.ADM_CD 
		               AND A.ADM_CD = C.ADM_CD) A, 
		       (SELECT RANK() 
		                 OVER( 
		                   PARTITION BY BOOBSCD 
		                   ORDER BY BOOBSCD, WMCYMD DESC, WMCYMD_2 DESC) 
		               AS RN, 
		               WS_NM /* 대권역 */, 
		               AM_NM /* 중권역 */, 
		               AS_NM /* 소권역 */, 
		               TO_CHAR(TO_DATE(WMCYMD||WMCYMD_2, 'YYYYMMDD HH24:MI'),'YYYY.MM.DD HH24:MI')AS WMCYMD, 
		               BOOBSCD 
		               AS PT_NO, 
		               OBSNM 
		               AS PT_NM, 
		               SWL, 
		               OWL, 
		               SFW, 
		               ECPC, 
		               INF, 
		               TOTOTF, 
		               EGOTF, 
		               GTOTF, 
		               CBOTF, 
		               FWOTF, 
		               ETCOTF 
		        FROM   (SELECT SUBSTR(A.YMDHM, 1, 6)     AS WMCYMD, 
		                       SUBSTR(A.YMDHM, 7, 6)     AS WMCYMD_2, 
		                       A.BOOBSCD, 
		                       OBSNM, 
		                       MAX(ADM_CD)               ADM_CD, 
		                       ROUND(AVG(SWL) / 1, 3)    SWL, 
		                       ROUND(AVG(OWL) / 1, 3)    OWL, 
		                       ROUND(AVG(SFW) / 1, 3)    SFW, 
		                       ROUND(AVG(ECPC) / 1, 3)   ECPC, 
		                       ROUND(AVG(INF) / 1, 3)    INF, 
		                       ROUND(AVG(TOTOTF) / 1, 3) TOTOTF, 
		                       ROUND(AVG(EGOTF) / 1, 3)  EGOTF, 
		                       ROUND(AVG(GTOTF) / 1, 3)  GTOTF, 
		                       ROUND(AVG(CBOTF) / 1, 3)  CBOTF, 
		                       ROUND(AVG(FWOTF) / 1, 3)  FWOTF, 
		                       ROUND(AVG(ETCOTF) / 1, 3) ETCOTF 
		                FROM   BOMST A, 
		                       BOOBSIF D 
		                WHERE  A.BOOBSCD = D.BOOBSCD 
		                       AND SUBSTR(A.YMDHM, 1, 6) <![CDATA[ >= ]]> TO_CHAR( TO_DATE(#{startYear} || #{startMonth}||'01', 'YYYYMMDD') - 1, 'YYYYMMDD') 
		                       AND SUBSTR(A.YMDHM, 1, 6) <![CDATA[ <= ]]> #{endYear} || #{endMonth} 
		                       AND A.BOOBSCD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
		                GROUP  BY SUBSTR(A.YMDHM, 1, 6), 
		                          SUBSTR(A.YMDHM, 7, 6), 
		                          A.BOOBSCD, 
		                          OBSNM) A, 
		               KESTI_WATER_ALL_MAP B, 
		               COM_DISTRICT_RAW C 
		        WHERE  A.ADM_CD = B.ADM_CD 
		          AND  A.ADM_CD = C.ADM_CD) B 
		WHERE  A.PT_NO = B.PT_NO 
		  AND  A.RN BETWEEN B.RN - 4 AND B.RN 
    ORDER  BY A.PT_NO,A.WMCYMD DESC,B.WMCYMD) 
GROUP BY RN, 
         WS_NM, 
         AM_NM, 
         AS_NM, 
         WMCYMD, 
         PT_NO, 
         PT_NM, 
         CURR_SWL, 
         CURR_OWL, 
         CURR_SFW, 
         CURR_ECPC, 
         CURR_INF, 
         CURR_TOTOTF, 
         CURR_EGOTF, 
         CURR_GTOTF, 
         CURR_CBOTF, 
         CURR_FWOTF, 
         CURR_ETCOTF
ORDER BY PT_NO,WMCYMD

</select>



<select id="searchResult_F_getDate" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">
	<if test="gubun == 1">
		SELECT MAX(WORK_DT) AS WORK_DT_VAL 
		    FROM   VPLA_FACI_OUT_TOTAL 
		  WHERE  FACI_CD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	
	</if>
	<if test="gubun == 2">
		SELECT  MAX(WORK_DT) AS WORK_DT_VAL 
		    FROM   VPLA_FACI_DIRECT_TRANSFER 
		  WHERE  FACI_CD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
	<if test="gubun == 3">
		SELECT MAX(WORK_DT) AS WORK_DT_VAL 
		    FROM   VPLA_FACI_IN_TOTAL 
		  WHERE  FACI_CD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
	<if test="gubun == 4">
		SELECT MAX(WORK_DT) AS WORK_DT_VAL 
		    FROM   VPLA_FACI_PIPE_TRANSFER 
		  WHERE  FACI_CD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	</if>
</select>

<!-- 환경기초시설 - 방류유량 GROUT CODE : F / LAYER CODE : F001 -->
<select id="searchResult_F_1" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

		SELECT	/* KRF-BIZ.SearchResultMapper.searchResult_F_1 */
	  		 FACI_CD,		
	         NO,
	         FACI_NM,
	         WORK_DT_VAL,
	         CHART_DATE,
	         DISCHARGE_NUM,
	         DISCHARGE_AMT_PHYS_VAL,
	         DISCHARGE_AMT_BIO_VAL,
	         DISCHARGE_AMT_HIGHTEC_VAL,
	         BOD_VAL,
	         COD_VAL,
	         SS_VAL,
	         TN_VAL,
	         TP_VAL,
	         COLI_VAL,
	         DISCHARGE_DISINFECT,
	         DISCHARGE_FACI_NM
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   DISCHARGE_AMT_PHYS_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS DISCHARGE_AMT_PHYS_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   DISCHARGE_AMT_BIO_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS DISCHARGE_AMT_BIO_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   DISCHARGE_AMT_HIGHTEC_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS DISCHARGE_AMT_HIGHTEC_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   BOD_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS BOD_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   COD_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS COD_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   SS_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS SS_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   TN_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS TN_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   TP_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS TP_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   COLI_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS COLI_GRAPH
	    FROM (  SELECT A.FACI_CD,
	                   A.NO                                           /* 순번 참고용 */ ,
	                   RANK ()
	                      OVER (PARTITION BY A.NO, A.FACI_CD ORDER BY B.WORK_DT ASC)
	                      AS RN2,
	                   A.FACI_NM                                       /* 처리시설명 */,
	                   A.WORK_DT AS WORK_DT_VAL                         /* 운영일자 */,
	                   A.WORK_DT AS CHART_DATE,
	                   B.WORK_DT AS WORK_DT_GRAPH                       /* 운영일자 */,
	                   A.DISCHARGE_NUM                                 /* 방류구번호 */,
	                   A.DISCHARGE_AMT_PHYS AS DISCHARGE_AMT_PHYS_VAL/* 방류량_물리적(㎥/일) */ ,
	                   B.DISCHARGE_AMT_PHYS AS DISCHARGE_AMT_PHYS_GRAPH/* 방류량_물리적(㎥/일) */ ,
	                   A.DISCHARGE_AMT_BIO AS DISCHARGE_AMT_BIO_VAL/* 방류량_생물학적(㎥/일) */ ,
	                   B.DISCHARGE_AMT_BIO AS DISCHARGE_AMT_BIO_GRAPH/* 방류량_생물학적(㎥/일) */  ,
	                   A.DISCHARGE_AMT_HIGHTEC AS DISCHARGE_AMT_HIGHTEC_VAL/* 방류량_고도(㎥/일) */,
	                   B.DISCHARGE_AMT_HIGHTEC AS DISCHARGE_AMT_HIGHTEC_GRAPH/* 방류량_고도(㎥/일) */,
	                   A.BOD AS BOD_VAL                             /* BOD(㎎/ℓ) */,
	                   B.BOD AS BOD_GRAPH                           /* BOD(㎎/ℓ) */,
	                   A.COD AS COD_VAL                             /* COD(㎎/ℓ) */,
	                   B.COD AS COD_GRAPH                           /* COD(㎎/ℓ) */,
	                   A.SS AS SS_VAL                                /* SS(㎎/ℓ) */,
	                   B.SS AS SS_GRAPH                              /* SS(㎎/ℓ) */
	                   A.TN AS TN_VAL                                /* TN(㎎/ℓ) */,
	                   B.TN AS TN_GRAPH                              /* TN(㎎/ℓ) */,
	                   A.TP AS TP_VAL                                /* TP(㎎/ℓ) */,
	                   B.TP AS TP_GRAPH                              /* TP(㎎/ℓ) */,
	                   A.COLI AS COLI_VAL/* 대장균군수(총대장균군수) */,
	                   B.COLI AS COLI_GRAPH/* 대장균군수(총대장균군수) */ ,
	                   A.DISCHARGE_DISINFECT                         /* 방류수소독방법 */,
	                   A.DISCHARGE_FACI_NM                           /* 연계처리시설명 */
	              FROM (SELECT RANK ()
	                              OVER (
	                                 PARTITION BY FACI_CD, DISCHARGE_NUM
	                                 ORDER BY FACI_CD, DISCHARGE_NUM, WORK_DT DESC)
	                              AS NO,
	                           ADM_CD,
	                           YYYY,
	                           FACI_NM,
	                           FACI_CD,
	                           WORK_DT,
	                           DISCHARGE_NUM,
	                           DISCHARGE_AMT_PHYS,
	                           DISCHARGE_AMT_BIO,
	                           DISCHARGE_AMT_HIGHTEC,
	                           BOD,
	                           COD,
	                           SS,
	                           TN,
	                           TP,
	                           COLI,
	                           DISCHARGE_DISINFECT,
	                           DISCHARGE_FACI_NM,
	                           DISCHARGE_FACI_CD,
	                           DISCHARGE_ADM_CD,
	                           DISCHARGE_RIVER_NM,
	                           DISCHARGE_RIVER_CD,
	                           DISCHARGE_AMT
	                      FROM (SELECT TT.ADM_CD,
	                                   T.YYYY,
	                                   FACI_NM,
	                                   FACI_CD,
	                                   WORK_DT,
	                                   DISCHARGE_NUM,
	                                   DISCHARGE_AMT_PHYS,
	                                   DISCHARGE_AMT_BIO,
	                                   DISCHARGE_AMT_HIGHTEC,
	                                   BOD,
	                                   COD,
	                                   SS,
	                                   TN,
	                                   TP,
	                                   COLI,
	                                   DISCHARGE_DISINFECT,
	                                   DISCHARGE_FACI_NM,
	                                   DISCHARGE_FACI_CD,
	                                   DISCHARGE_ADM_CD,
	                                   DISCHARGE_RIVER_NM,
	                                   DISCHARGE_RIVER_CD,
	                                   DISCHARGE_AMT
	                              FROM VPLA_FACI_OUT_TOTAL T,
	                                   COM_DISTRICT_RAW TT,
	                                   KESTI_WATER_ALL_MAP C
	                             WHERE T.ADM_CD = C.ADM_CD AND T.ADM_CD = TT.ADM_CD))
	                   A,
	                   (SELECT RANK ()
	                              OVER (
	                                 PARTITION BY FACI_CD, DISCHARGE_NUM
	                                 ORDER BY FACI_CD, DISCHARGE_NUM, WORK_DT DESC)
	                              AS NO,
	                           ADM_CD,
	                           YYYY,
	                           FACI_NM,
	                           FACI_CD,
	                           WORK_DT,
	                           DISCHARGE_NUM,
	                           DISCHARGE_AMT_PHYS,
	                           DISCHARGE_AMT_BIO,
	                           DISCHARGE_AMT_HIGHTEC,
	                           BOD,
	                           COD,
	                           SS,
	                           TN,
	                           TP,
	                           COLI,
	                           DISCHARGE_DISINFECT,
	                           DISCHARGE_FACI_NM,
	                           DISCHARGE_FACI_CD,
	                           DISCHARGE_ADM_CD,
	                           DISCHARGE_RIVER_NM,
	                           DISCHARGE_RIVER_CD,
	                           DISCHARGE_AMT
	                      FROM (SELECT TT.ADM_CD,
	                                   T.YYYY,
	                                   FACI_NM,
	                                   FACI_CD,
	                                   WORK_DT,
	                                   DISCHARGE_NUM,
	                                   DISCHARGE_AMT_PHYS,
	                                   DISCHARGE_AMT_BIO,
	                                   DISCHARGE_AMT_HIGHTEC,
	                                   BOD,
	                                   COD,
	                                   SS,
	                                   TN,
	                                   TP,
	                                   COLI,
	                                   DISCHARGE_DISINFECT,
	                                   DISCHARGE_FACI_NM,
	                                   DISCHARGE_FACI_CD,
	                                   DISCHARGE_ADM_CD,
	                                   DISCHARGE_RIVER_NM,
	                                   DISCHARGE_RIVER_CD,
	                                   DISCHARGE_AMT
	                              FROM VPLA_FACI_OUT_TOTAL T,
	                                   COM_DISTRICT_RAW TT,
	                                   KESTI_WATER_ALL_MAP C
	                             WHERE T.ADM_CD = C.ADM_CD AND T.ADM_CD = TT.ADM_CD))
	                   B
	             WHERE     A.FACI_CD = B.FACI_CD
	                   AND A.DISCHARGE_NUM = B.DISCHARGE_NUM
	                   AND A.ADM_CD = B.ADM_CD
	                   AND A.NO BETWEEN B.NO - 4 AND B.NO
	                   AND A.FACI_CD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	                   AND SUBSTR (A.WORK_DT, 1, 4) || SUBSTR (A.WORK_DT, 6, 2) BETWEEN #{startYear} || #{startMonth}
	                                                                                AND  #{endYear} || #{endMonth}
	          ORDER BY A.FACI_NM,
	                   A.DISCHARGE_NUM,
	                   A.WORK_DT DESC,
	                   B.WORK_DT)
	GROUP BY FACI_CD,
	         NO,
	         FACI_NM,
	         WORK_DT_VAL,
	         CHART_DATE,
	         DISCHARGE_NUM,
	         DISCHARGE_AMT_PHYS_VAL,
	         DISCHARGE_AMT_BIO_VAL,
	         DISCHARGE_AMT_HIGHTEC_VAL,
	         BOD_VAL,
	         COD_VAL,
	         SS_VAL,
	         TN_VAL,
	         TP_VAL,
	         COLI_VAL,
	         DISCHARGE_DISINFECT,
	         DISCHARGE_FACI_NM
	ORDER BY NO

</select>

<!-- 환경기초시설 - 직접이송량 GROUT CODE : F / LAYER CODE : F002 -->
<select id="searchResult_F_2" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

	SELECT 	/* KRF-BIZ.SearchResultMapper.searchResult_F_2 */
		FACI_CD      
		,NO           
		,FACI_NM      
		,WORK_DT_VAL  
		,CHART_DATE   
		,IN_PL_TYPE   
		,AMT_VAL      
		,BOD_VAL      
		,COD_VAL       
		,SS_VAL        
		,TN_VAL        
		,TP_VAL       
		,COLI_VAL
		, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   AMT_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS AMT_GRAPH
		, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   BOD_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS BOD_GRAPH
		, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   COD_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS COD_GRAPH
		, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   SS_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS SS_GRAPH
		, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   TN_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS TN_GRAPH
		, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   TP_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS TP_GRAPH
		, '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   COLI_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS COLI_GRAPH
		FROM (
		SELECT A.FACI_CD, 
		       A.NO /* 순번 참고용 */, 
		       RANK () OVER (PARTITION BY A.NO, A.FACI_CD ORDER BY  B.WORK_DT ASC) AS RN2, 
		       A.FACI_NM /* 처리시설명*/, 
		       A.WORK_DT AS WORK_DT_VAL /* 운영일자*/, 
		       A.WORK_DT AS CHART_DATE /* 운영일자*/, 
		       B.WORK_DT AS WORK_DT_GRAPH /* 운영일자(추이변화)*/, 
		       A.IN_PL_TYPE /* 유입원 */, 
		       A.AMT     AS AMT_VAL /* 유량(㎥/일) */, 
		       B.AMT     AS AMT_GRAPH /* 유량(㎥/일) */, 
		       A.BOD     AS BOD_VAL /* BOD(㎎/ℓ) */, 
		       B.BOD     AS BOD_GRAPH /* BOD(㎎/ℓ) */, 
		       A.COD     AS COD_VAL /* COD(㎎/ℓ) */, 
		       B.COD     AS COD_GRAPH /* COD(㎎/ℓ) */, 
		       A.SS      AS SS_VAL /* SS(㎎/ℓ) */, 
		       B.SS      AS SS_GRAPH /* SS(㎎/ℓ) */, 
		       A.TN      AS TN_VAL /* TN(㎎/ℓ) */, 
		       B.TN      AS TN_GRAPH /* TN(㎎/ℓ) */, 
		       A.TP      AS TP_VAL /* TP(㎎/ℓ) */, 
		       B.TP      AS TP_GRAPH /* TP(㎎/ℓ) */, 
		       A.COLI    AS COLI_VAL /* 대장균군수(총대장균군수) */, 
		       B.COLI    AS COLI_GRAPH /* 대장균군수(총대장균군수) */ 
		FROM   (SELECT RANK() 
		                 OVER( 
		                   PARTITION BY FACI_CD, IN_PL_TYPE 
		                   ORDER BY FACI_CD, IN_PL_TYPE, WORK_DT DESC) AS NO, 
		               TT.ADM_CD, 
		               T.YYYY, 
		               FACI_NM, 
		               FACI_CD, 
		               WORK_DT, 
		               IN_PL_TYPE, 
		               AMT, 
		               BOD, 
		               COD, 
		               SS, 
		               TN, 
		               TP, 
		               COLI 
		        FROM   VPLA_FACI_DIRECT_TRANSFER T, 
		               COM_DISTRICT_RAW TT, 
		               KESTI_WATER_ALL_MAP C 
		        WHERE  T.ADM_CD = C.ADM_CD 
		               AND T.ADM_CD = TT.ADM_CD) A, 
		       (SELECT RANK() 
		                 OVER( 
		                   PARTITION BY FACI_CD, IN_PL_TYPE 
		                   ORDER BY FACI_CD, IN_PL_TYPE, WORK_DT DESC) AS NO, 
		               TT.ADM_CD, 
		               T.YYYY, 
		               FACI_NM, 
		               FACI_CD, 
		               WORK_DT, 
		               IN_PL_TYPE, 
		               AMT, 
		               BOD, 
		               COD, 
		               SS, 
		               TN, 
		               TP, 
		               COLI 
		        FROM   VPLA_FACI_DIRECT_TRANSFER T, 
		               COM_DISTRICT_RAW TT, 
		               KESTI_WATER_ALL_MAP C 
		        WHERE  T.ADM_CD = C.ADM_CD 
		               AND T.ADM_CD = TT.ADM_CD) B 
		WHERE  A.FACI_CD = B.FACI_CD 
		       AND A.IN_PL_TYPE = B.IN_PL_TYPE 
		       AND A.ADM_CD = B.ADM_CD 
		       AND A.NO BETWEEN B.NO - 4 AND B.NO 
		       AND A.FACI_CD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach> 
		       AND SUBSTR(A.WORK_DT, 1, 4) 
		           || SUBSTR(A.WORK_DT, 6, 2) BETWEEN #{startYear} || #{startMonth} AND #{endYear} || #{endMonth}
		ORDER  BY A.FACI_NM, 
		          A.IN_PL_TYPE, 
		          A.WORK_DT DESC, 
		          B.WORK_DT ) GROUP BY
		          FACI_CD      
		,NO           
		,FACI_NM      
		,WORK_DT_VAL  
		,CHART_DATE   
		,IN_PL_TYPE   
		,AMT_VAL      
		,BOD_VAL      
		,COD_VAL       
		,SS_VAL        
		,TN_VAL        
		,TP_VAL       
		,COLI_VAL    
		ORDER BY NO
</select>

<!-- 환경기초시설 - 총유입량 GROUT CODE : F / LAYER CODE : F003 -->
<select id="searchResult_F_3" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

	  SELECT 	/* KRF-BIZ.SearchResultMapper.searchResult_F_3 */
	  		 FACI_CD,
	         NO,
	         FACI_NM,
	         WORK_DT_VAL,
	         CHART_DATE,
	         PIPE_NUM,
	         AMT_VAL,
	         BOD_VAL,
	         COD_VAL,
	         SS_VAL,
	         TN_VAL,
	         TP_VAL,
	         COLI_VAL, 
	         '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   AMT_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS AMT_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   BOD_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS BOD_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   COD_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS COD_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   SS_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS SS_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   TN_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS TN_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   TP_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS TP_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   COLI_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//text()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'quot;' ]]> , '"') ||']' AS COLI_GRAPH
	    FROM (  SELECT A.FACI_CD,
	                   A.NO,
	                   RANK ()
	                      OVER (PARTITION BY A.NO, A.faci_cd ORDER BY B.work_dt ASC)
	                      AS RN2,
	                   A.FACI_NM                                       /* 처리시설명 */
	                            ,
	                   A.WORK_DT AS WORK_DT_VAL                         /* 운영일자 */
	                                           ,
	                   A.WORK_DT AS CHART_DATE                          /* 운영일자 */
	                                          ,
	                   B.WORK_DT AS WORK_DT_GRAPH                       /* 운영일자 */
	                                             ,
	                   A.PIPE_NUM                                      /* 유입구번호 */
	                             ,
	                   A.AMT AS AMT_VAL                              /* 유량(㎥/일) */
	                                   ,
	                   B.AMT AS AMT_GRAPH                            /* 유량(㎥/일) */
	                                     ,
	                   A.BOD AS BOD_VAL                             /* BOD(㎎/ℓ) */
	                                   ,
	                   B.BOD AS BOD_GRAPH                           /* BOD(㎎/ℓ) */
	                                     ,
	                   A.COD AS COD_VAL                             /* COD(㎎/ℓ) */
	                                   ,
	                   B.COD AS COD_GRAPH                           /* COD(㎎/ℓ) */
	                                     ,
	                   A.SS AS SS_VAL                                /* SS(㎎/ℓ) */
	                                 ,
	                   B.SS AS SS_GRAPH                              /* SS(㎎/ℓ) */
	                                   ,
	                   A.TN AS TN_VAL                                /* TN(㎎/ℓ) */
	                                 ,
	                   B.TN AS TN_GRAPH                              /* TN(㎎/ℓ) */
	                                   ,
	                   A.TP AS TP_VAL                                /* TP(㎎/ℓ) */
	                                 ,
	                   B.TP AS TP_GRAPH                              /* TP(㎎/ℓ) */
	                                   ,
	                   A.COLI AS COLI_VAL                      /* 대장균군수(총대장균군수) */
	                                     ,
	                   B.COLI AS COLI_GRAPH                    /* 대장균군수(총대장균군수) */
	              FROM (SELECT RANK ()
	                              OVER (PARTITION BY FACI_CD, PIPE_NUM
	                                    ORDER BY FACI_CD, PIPE_NUM, WORK_DT DESC)
	                              AS NO,
	                           TT.ADM_CD,
	                           T.YYYY,
	                           FACI_CD,
	                           FACI_NM,
	                           WORK_DT,
	                           PIPE_NUM,
	                           AMT,
	                           BOD,
	                           COD,
	                           SS,
	                           TN,
	                           TP,
	                           COLI
	                      FROM VPLA_FACI_IN_TOTAL T,
	                           COM_DISTRICT_RAW TT,
	                           KESTI_WATER_ALL_MAP C
	                     WHERE T.ADM_CD = C.ADM_CD AND T.ADM_CD = TT.ADM_CD) A,
	                   (SELECT RANK ()
	                              OVER (PARTITION BY FACI_CD, PIPE_NUM
	                                    ORDER BY FACI_CD, PIPE_NUM, WORK_DT DESC)
	                              AS NO,
	                           TT.ADM_CD,
	                           T.YYYY,
	                           FACI_CD,
	                           FACI_NM,
	                           WORK_DT,
	                           PIPE_NUM,
	                           AMT,
	                           BOD,
	                           COD,
	                           SS,
	                           TN,
	                           TP,
	                           COLI
	                      FROM VPLA_FACI_IN_TOTAL T,
	                           COM_DISTRICT_RAW TT,
	                           KESTI_WATER_ALL_MAP C
	                     WHERE T.ADM_CD = C.ADM_CD AND T.ADM_CD = TT.ADM_CD) B
	             WHERE     A.FACI_CD = B.FACI_CD
	                   AND A.PIPE_NUM = B.PIPE_NUM
	                   AND A.ADM_CD = B.ADM_CD
	                   AND A.NO BETWEEN B.NO - 4 AND B.NO
	                   AND A.FACI_CD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	                   AND SUBSTR (A.WORK_DT, 1, 4) || SUBSTR (A.WORK_DT, 6, 2) BETWEEN #{startYear} || #{startMonth}
	                                                                                AND  #{endYear} || #{endMonth}
	          ORDER BY A.FACI_NM,
	                   A.PIPE_NUM,
	                   A.WORK_DT DESC,
	                   B.WORK_DT)
	GROUP BY FACI_CD,
	         NO,
	         FACI_NM,
	         WORK_DT_VAL,
	         CHART_DATE,
	         PIPE_NUM,
	         AMT_VAL,
	         BOD_VAL,
	         COD_VAL,
	         SS_VAL,
	         TN_VAL,
	         TP_VAL,
	         COLI_VAL
	ORDER BY NO                                                
 
</select>

<!-- 환경기초시설 - 관거이송량 GROUT CODE : F / LAYER CODE : F004 -->
<select id="searchResult_F_4" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

	  SELECT 	/* KRF-BIZ.SEARCHRESULTMAPPER.SEARCHRESULT_F_4 */
	  		 FACI_CD,
	         NO,
	         FACI_NM,
	         WORK_DT_VAL,
	         CHART_DATE,
	         PIPE_NUM,
	         PIPE_TYPE,
	         AMT_VAL,
	         BOD_VAL,
	         COD_VAL,
	         SS_VAL,
	         TN_VAL,
	         TP_VAL,
	         COLI_VAL,
	         BYPASS_AMT_VAL,
	         CONNECT_FACI_NM
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   AMT_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS AMT_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   BOD_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS BOD_GRAPH         
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   COD_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS COD_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   SS_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS SS_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   TN_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS TN_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   TP_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS TP_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   COLI_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS COLI_GRAPH
	        , '['||REPLACE(SUBSTR (XMLAGG (XMLELEMENT (COL,',[','"'||RN2 || REPLACE(WORK_DT_GRAPH,'.','') || '","',TRIM(' ' FROM   BYPASS_AMT_GRAPH) || '"]') ORDER BY WORK_DT_GRAPH).EXTRACT ('//TEXT()').GETSTRINGVAL (),2) , <![CDATA[  '&'||'QUOT;' ]]> , '"') ||']' AS BYPASS_AMT_GRAPH
	    FROM (  SELECT A.FACI_CD,
	                   RANK ()
	                      OVER (PARTITION BY A.NO, A.FACI_CD ORDER BY B.WORK_DT ASC)
	                      AS RN2,
	                   A.NO                                           /* 순번 참고용 */,
	                   A.FACI_NM                                        /* 처리시설명*/,
	                   A.WORK_DT AS WORK_DT_VAL                          /* 운영일자*/,
	                   A.WORK_DT AS CHART_DATE                           /* 운영일자*/,
	                   B.WORK_DT AS WORK_DT_GRAPH                  /* 운영일자(추이변화)*/,
	                   A.PIPE_NUM                                        /* 관거번호*/,
	                   A.PIPE_TYPE                                       /* 관거유형*/,
	                   A.AMT AS AMT_VAL                               /* 유량(㎥/일)*/,
	                   B.AMT AS AMT_GRAPH                            /* 유량(추이변화)*/,
	                   A.BOD AS BOD_VAL                              /* BOD(㎎/ℓ)*/,
	                   B.BOD AS BOD_GRAPH                           /* BOD(추이변화)*/,
	                   A.COD AS COD_VAL                              /* COD(㎎/ℓ)*/,
	                   B.COD AS COD_GRAPH                           /* COD(추이변화)*/,
	                   A.SS AS SS_VAL                                 /* SS(㎎/ℓ)*/,
	                   B.SS AS SS_GRAPH                              /* SS(추이변화)*/,
	                   A.TN AS TN_VAL                                 /* TN(㎎/ℓ)*/,
	                   B.TN AS TN_GRAPH                              /* TN(추이변화)*/,
	                   A.TP AS TP_VAL                                 /* TP(㎎/ℓ)*/,
	                   B.TP AS TP_GRAPH                              /* TP(추이변화)*/,
	                   A.COLI AS COLI_VAL                       /* 대장균군수(총대장균군수)*/,
	                   B.COLI AS COLI_GRAPH                       /* 대장균군수(추이변화)*/,
	                   A.BYPASS_AMT AS BYPASS_AMT_VAL            /* 미처리배제유량(㎥/일)*/,
	                   B.BYPASS_AMT AS BYPASS_AMT_GRAPH         /* 미처리배제유량(추이변화)*/,
	                   A.CONNECT_FACI_NM                               /*연계처리시설명*/
	              FROM (SELECT RANK ()
	                              OVER (PARTITION BY FACI_CD, PIPE_NUM
	                                    ORDER BY FACI_CD, PIPE_NUM, WORK_DT DESC)
	                              AS NO,
	                           FACI_CD,
	                           FACI_NM,
	                           WORK_DT,
	                           PIPE_NUM,
	                           PIPE_TYPE,
	                           AMT,
	                           BOD,
	                           COD,
	                           SS,
	                           TN,
	                           TP,
	                           COLI,
	                           BYPASS_AMT,
	                           CONNECT_FACI_NM,
	                           ADM_CD
	                      FROM (SELECT FACI_CD,
	                                   FACI_NM,
	                                   WORK_DT,
	                                   PIPE_NUM,
	                                   PIPE_TYPE,
	                                   AMT,
	                                   BOD,
	                                   COD,
	                                   SS,
	                                   TN,
	                                   TP,
	                                   COLI,
	                                   BYPASS_AMT,
	                                   CONNECT_FACI_NM,
	                                   T.ADM_CD
	                              FROM VPLA_FACI_PIPE_TRANSFER T,
	                                   COM_DISTRICT_RAW TT,
	                                   KESTI_WATER_ALL_MAP C
	                             WHERE T.ADM_CD = C.ADM_CD AND T.ADM_CD = TT.ADM_CD))
	                   A,
	                   (SELECT RANK ()
	                              OVER (PARTITION BY FACI_CD, PIPE_NUM
	                                    ORDER BY FACI_CD, PIPE_NUM, WORK_DT DESC)
	                              AS NO,
	                           FACI_CD,
	                           FACI_NM,
	                           WORK_DT,
	                           PIPE_NUM,
	                           PIPE_TYPE,
	                           AMT,
	                           BOD,
	                           COD,
	                           SS,
	                           TN,
	                           TP,
	                           COLI,
	                           BYPASS_AMT,
	                           CONNECT_FACI_NM,
	                           ADM_CD
	                      FROM (SELECT FACI_CD,
	                                   FACI_NM,
	                                   WORK_DT,
	                                   PIPE_NUM,
	                                   PIPE_TYPE,
	                                   AMT,
	                                   BOD,
	                                   COD,
	                                   SS,
	                                   TN,
	                                   TP,
	                                   COLI,
	                                   BYPASS_AMT,
	                                   CONNECT_FACI_NM,
	                                   T.ADM_CD
	                              FROM VPLA_FACI_PIPE_TRANSFER T,
	                                   COM_DISTRICT_RAW TT,
	                                   KESTI_WATER_ALL_MAP C
	                             WHERE T.ADM_CD = C.ADM_CD AND T.ADM_CD = TT.ADM_CD))
	                   B
	             WHERE     A.FACI_CD = B.FACI_CD
	                   AND A.PIPE_NUM = B.PIPE_NUM
	                   AND A.PIPE_TYPE = B.PIPE_TYPE
	                   AND A.ADM_CD = B.ADM_CD
	                   AND A.NO BETWEEN B.NO - 4 AND B.NO
	                   AND A.FACI_CD IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>
	                   AND SUBSTR (A.WORK_DT, 1, 4) || SUBSTR (A.WORK_DT, 6, 2) BETWEEN #{startYear} || #{startMonth}
	                                                                                AND  #{endYear} || #{endMonth}
	          ORDER BY A.FACI_NM,
	                   A.PIPE_NUM,
	                   A.WORK_DT DESC,
	                   B.WORK_DT)
	GROUP BY FACI_CD,
	         NO,
	         FACI_NM,
	         WORK_DT_VAL,
	         CHART_DATE,
	         PIPE_NUM,
	         PIPE_TYPE,
	         AMT_VAL,
	         BOD_VAL,
	         COD_VAL,
	         SS_VAL,
	         TN_VAL,
	         TP_VAL,
	         COLI_VAL,
	         BYPASS_AMT_VAL,
	         CONNECT_FACI_NM
	ORDER BY NO
</select>

<!-- 부하량 총괄표 -->
<select id="searchResult_PollLoad_Total" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

	WITH POLLULANT_LOAD_FOR_CAT_TBL 
     AS (SELECT WS_CD, 
                SW_CODE, 
                ADM_CD, 
                NO, 
                WS_NM, 
                AM_NM, 
                SW_NAME, 
                CAT_DID, 
                DO_NM 
                || ' ' 
                || CTY_NM 
                || ' ' 
                || DONG_NM 
                || ' ' 
                || RI_NM AS ADDR, 
                PERCENTAGE, 
                GUBUN, 
                GNR_BOD_SUM, 
                GNR_TN_SUM, 
                GNR_TP_SUM, 
                OUT_BOD_SUM, 
                OUT_TN_SUM, 
                OUT_TP_SUM 
         FROM   (SELECT '1'      AS NO, 
                        '소계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''       AS PERCENTAGE, 
                        GNR_BOD_SUM, 
                        GNR_TN_SUM, 
                        GNR_TP_SUM, 
                        OUT_BOD_SUM, 
                        OUT_TN_SUM, 
                        OUT_TP_SUM 
                 FROM   POLLULANT_LOAD_FOR_CAT) 
         WHERE  CAT_DID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
         ORDER  BY WS_CD, 
                   SW_CODE, 
                   CAT_DID, 
                   ADM_CD, 
                   NO) 
SELECT WS_NM, 
       AM_NM, 
       SW_NAME, 
       CAT_DID, 
       GUBUN, 
       GNR_BOD_SUM, 
       GNR_TN_SUM, 
       GNR_TP_SUM, 
       OUT_BOD_SUM, 
       OUT_TN_SUM, 
       OUT_TP_SUM 
FROM   (SELECT '1'              AS NO_1, 
               NO               AS NO_2, 
               ''               AS WS_CD, 
               ''               AS SW_CODE, 
               ''               AS WS_NM, 
               ''               AS AM_NM, 
               '총계'         AS SW_NAME, 
               ''               AS CAT_DID, 
               GUBUN, 
               SUM(GNR_BOD_SUM) AS GNR_BOD_SUM, 
               SUM(GNR_TN_SUM)  AS GNR_TN_SUM, 
               SUM(GNR_TP_SUM)  AS GNR_TP_SUM, 
               SUM(OUT_BOD_SUM) AS OUT_BOD_SUM, 
               SUM(OUT_TN_SUM)  AS OUT_TN_SUM, 
               SUM(OUT_TP_SUM)  AS OUT_TP_SUM 
        FROM   POLLULANT_LOAD_FOR_CAT_TBL 
        WHERE  1 = 1 
        GROUP  BY GUBUN, 
                  NO 
        UNION 
        SELECT '2', 
               NO, 
               WS_CD, 
               SW_CODE, 
               WS_NM, 
               AM_NM, 
               SW_NAME, 
               CAT_DID, 
               GUBUN, 
               SUM(GNR_BOD_SUM) AS GNR_BOD_SUM, 
               SUM(GNR_TN_SUM)  AS GNR_TN_SUM, 
               SUM(GNR_TP_SUM)  AS GNR_TP_SUM, 
               SUM(OUT_BOD_SUM) AS OUT_BOD_SUM, 
               SUM(OUT_TN_SUM)  AS OUT_TN_SUM, 
               SUM(OUT_TP_SUM)  AS OUT_TP_SUM 
        FROM   POLLULANT_LOAD_FOR_CAT_TBL 
        GROUP  BY NO, 
                  WS_CD, 
                  SW_CODE, 
                  WS_NM, 
                  AM_NM, 
                  SW_NAME, 
                  CAT_DID, 
                  GUBUN) 
ORDER  BY NO_1, 
          WS_CD, 
          SW_CODE, 
          NO_2 
	
</select>

<!-- 부하량 표준유역단위 -->
<select id="searchResult_PollLoad_Standard" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

	WITH POLLULANT_LOAD_FOR_CAT_TBL 
     AS (SELECT WS_CD, 
                SW_CODE, 
                ADM_CD, 
                NO, 
                WS_NM, 
                AM_NM, 
                SW_NAME, 
                CAT_DID, 
                DO_NM 
                || ' ' 
                || CTY_NM 
                || ' ' 
                || DONG_NM 
                || ' ' 
                || RI_NM AS ADDR, 
                PERCENTAGE, 
                GUBUN, 
                GNR_BOD_SUM, 
                GNR_TN_SUM, 
                GNR_TP_SUM, 
                OUT_BOD_SUM, 
                OUT_TN_SUM, 
                OUT_TP_SUM 
         FROM   (SELECT '1'      AS NO, 
                        '소계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''       AS PERCENTAGE, 
                        GNR_BOD_SUM, 
                        GNR_TN_SUM, 
                        GNR_TP_SUM, 
                        OUT_BOD_SUM, 
                        OUT_TN_SUM, 
                        OUT_TP_SUM 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '2'         AS NO, 
                        '생활계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_POP, 
                        GNR_TN_POP, 
                        GNR_TP_POP, 
                        OUT_BOD_POP, 
                        OUT_TN_POP, 
                        OUT_TP_POP 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '3'         AS NO, 
                        '축산계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_ANI, 
                        GNR_TN_ANI, 
                        GNR_TP_ANI, 
                        OUT_BOD_ANI, 
                        OUT_TN_ANI, 
                        OUT_TP_ANI 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '4'         AS NO, 
                        '산업계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_IND, 
                        GNR_TN_IND, 
                        GNR_TP_IND, 
                        OUT_BOD_IND, 
                        OUT_TN_IND, 
                        OUT_TP_IND 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '5'         AS NO, 
                        '토지계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_LAND, 
                        GNR_TN_LAND, 
                        GNR_TP_LAND, 
                        OUT_BOD_LAND, 
                        OUT_TN_LAND, 
                        OUT_TP_LAND 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '6'         AS NO, 
                        '양식계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_FISH, 
                        GNR_TN_FISH, 
                        GNR_TP_FISH, 
                        OUT_BOD_FISH, 
                        OUT_TN_FISH, 
                        OUT_TP_FISH 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '7'         AS NO, 
                        '매립계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_LANDFILL, 
                        GNR_TN_LANDFILL, 
                        GNR_TP_LANDFILL, 
                        OUT_BOD_LANDFILL, 
                        OUT_TN_LANDFILL, 
                        OUT_TP_LANDFILL 
                 FROM   POLLULANT_LOAD_FOR_CAT) 
         WHERE  CAT_DID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
         ORDER  BY WS_CD, 
                   SW_CODE, 
                   CAT_DID, 
                   ADM_CD, 
                   NO) 
SELECT WS_NM, 
       AM_NM, 
       SW_NAME, 
       GUBUN, 
       GNR_BOD_SUM, 
       GNR_TN_SUM, 
       GNR_TP_SUM, 
       OUT_BOD_SUM, 
       OUT_TN_SUM, 
       OUT_TP_SUM 
FROM   (SELECT '1'              AS NO_1, 
               NO               AS NO_2, 
               ''               AS WS_CD, 
               ''               AS SW_CODE, 
               ''               AS WS_NM, 
               ''               AS AM_NM, 
               '총계'         AS SW_NAME, 
               GUBUN, 
               SUM(GNR_BOD_SUM) AS GNR_BOD_SUM, 
               SUM(GNR_TN_SUM)  AS GNR_TN_SUM, 
               SUM(GNR_TP_SUM)  AS GNR_TP_SUM, 
               SUM(OUT_BOD_SUM) AS OUT_BOD_SUM, 
               SUM(OUT_TN_SUM)  AS OUT_TN_SUM, 
               SUM(OUT_TP_SUM)  AS OUT_TP_SUM 
        FROM   POLLULANT_LOAD_FOR_CAT_TBL 
        WHERE  1 = 1 
        GROUP  BY GUBUN, 
                  NO 
        UNION 
        SELECT '2', 
               NO, 
               WS_CD, 
               SW_CODE, 
               WS_NM, 
               AM_NM, 
               SW_NAME, 
               GUBUN, 
               SUM(GNR_BOD_SUM) AS GNR_BOD_SUM, 
               SUM(GNR_TN_SUM)  AS GNR_TN_SUM, 
               SUM(GNR_TP_SUM)  AS GNR_TP_SUM, 
               SUM(OUT_BOD_SUM) AS OUT_BOD_SUM, 
               SUM(OUT_TN_SUM)  AS OUT_TN_SUM, 
               SUM(OUT_TP_SUM)  AS OUT_TP_SUM 
        FROM   POLLULANT_LOAD_FOR_CAT_TBL 
        GROUP  BY NO, 
                  WS_CD, 
                  SW_CODE, 
                  WS_NM, 
                  AM_NM, 
                  SW_NAME, 
                  GUBUN) 
ORDER  BY NO_1, 
          WS_CD, 
          SW_CODE, 
          NO_2 
	
</select>

<!-- 부하량 집수구역단위 -->
<select id="searchResult_PollLoad_Cat" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

	WITH POLLULANT_LOAD_FOR_CAT_TBL 
     AS (SELECT WS_CD, 
                SW_CODE, 
                ADM_CD, 
                NO, 
                WS_NM    AS WS_NM, 
                AM_NM, 
                SW_NAME, 
                CAT_DID, 
                DO_NM 
                || ' ' 
                || CTY_NM 
                || ' ' 
                || DONG_NM 
                || ' ' 
                || RI_NM AS ADDR, 
                PERCENTAGE, 
                GUBUN, 
                GNR_BOD_SUM, 
                GNR_TN_SUM, 
                GNR_TP_SUM, 
                OUT_BOD_SUM, 
                OUT_TN_SUM, 
                OUT_TP_SUM 
         FROM   (SELECT '1'      AS NO, 
                        '소계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''       AS PERCENTAGE, 
                        GNR_BOD_SUM, 
                        GNR_TN_SUM, 
                        GNR_TP_SUM, 
                        OUT_BOD_SUM, 
                        OUT_TN_SUM, 
                        OUT_TP_SUM 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '2'         AS NO, 
                        '생활계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_POP, 
                        GNR_TN_POP, 
                        GNR_TP_POP, 
                        OUT_BOD_POP, 
                        OUT_TN_POP, 
                        OUT_TP_POP 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '3'         AS NO, 
                        '축산계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_ANI, 
                        GNR_TN_ANI, 
                        GNR_TP_ANI, 
                        OUT_BOD_ANI, 
                        OUT_TN_ANI, 
                        OUT_TP_ANI 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '4'         AS NO, 
                        '산업계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_IND, 
                        GNR_TN_IND, 
                        GNR_TP_IND, 
                        OUT_BOD_IND, 
                        OUT_TN_IND, 
                        OUT_TP_IND 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '5'         AS NO, 
                        '토지계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_LAND, 
                        GNR_TN_LAND, 
                        GNR_TP_LAND, 
                        OUT_BOD_LAND, 
                        OUT_TN_LAND, 
                        OUT_TP_LAND 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '6'         AS NO, 
                        '양식계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_FISH, 
                        GNR_TN_FISH, 
                        GNR_TP_FISH, 
                        OUT_BOD_FISH, 
                        OUT_TN_FISH, 
                        OUT_TP_FISH 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '7'         AS NO, 
                        '매립계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        ''          AS PERCENTAGE, 
                        GNR_BOD_LANDFILL, 
                        GNR_TN_LANDFILL, 
                        GNR_TP_LANDFILL, 
                        OUT_BOD_LANDFILL, 
                        OUT_TN_LANDFILL, 
                        OUT_TP_LANDFILL 
                 FROM   POLLULANT_LOAD_FOR_CAT) 
         WHERE  CAT_DID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
         ORDER  BY WS_CD, 
                   SW_CODE, 
                   CAT_DID, 
                   ADM_CD, 
                   NO) 
SELECT WS_NM, 
       AM_NM, 
       SW_NAME, 
       CAT_DID, 
       GUBUN, 
       GNR_BOD_SUM, 
       GNR_TN_SUM, 
       GNR_TP_SUM, 
       OUT_BOD_SUM, 
       OUT_TN_SUM, 
       OUT_TP_SUM 
FROM   (SELECT '1'              AS NO_1, 
               NO               AS NO_2, 
               ''               AS WS_CD, 
               ''               AS SW_CODE, 
               ''               AS WS_NM, 
               ''               AS AM_NM, 
               ''               AS SW_NAME, 
               '총계'         AS CAT_DID, 
               GUBUN, 
               SUM(GNR_BOD_SUM) AS GNR_BOD_SUM, 
               SUM(GNR_TN_SUM)  AS GNR_TN_SUM, 
               SUM(GNR_TP_SUM)  AS GNR_TP_SUM, 
               SUM(OUT_BOD_SUM) AS OUT_BOD_SUM, 
               SUM(OUT_TN_SUM)  AS OUT_TN_SUM, 
               SUM(OUT_TP_SUM)  AS OUT_TP_SUM 
        FROM   POLLULANT_LOAD_FOR_CAT_TBL 
        WHERE  1 = 1 
        GROUP  BY GUBUN, 
                  NO 
        UNION 
        SELECT '2', 
               NO, 
               WS_CD, 
               SW_CODE, 
               WS_NM, 
               AM_NM, 
               SW_NAME, 
               CAT_DID, 
               GUBUN, 
               SUM(GNR_BOD_SUM) AS GNR_BOD_SUM, 
               SUM(GNR_TN_SUM)  AS GNR_TN_SUM, 
               SUM(GNR_TP_SUM)  AS GNR_TP_SUM, 
               SUM(OUT_BOD_SUM) AS OUT_BOD_SUM, 
               SUM(OUT_TN_SUM)  AS OUT_TN_SUM, 
               SUM(OUT_TP_SUM)  AS OUT_TP_SUM 
        FROM   POLLULANT_LOAD_FOR_CAT_TBL 
        GROUP  BY NO, 
                  WS_CD, 
                  SW_CODE, 
                  WS_NM, 
                  AM_NM, 
                  SW_NAME, 
                  CAT_DID, 
                  GUBUN) 
ORDER  BY NO_1, 
          WS_CD, 
          SW_CODE, 
          CAT_DID, 
          NO_2 

</select>

<!-- 부하량 집수구역단위_상세 -->
<select id="searchResult_PollLoad_Cat_Detail" parameterType="com.ce.krf.biz.model.SearchResultVO" resultType="hashmap">

	WITH POLLULANT_LOAD_FOR_CAT_TBL 
     AS (SELECT WS_CD, 
                SW_CODE, 
                ADM_CD, 
                NO, 
                WS_NM, 
                AM_NM, 
                SW_NAME, 
                CAT_DID, 
                DO_NM 
                || ' ' 
                || CTY_NM 
                || ' ' 
                || DONG_NM 
                || ' ' 
                || RI_NM AS ADDR, 
                PERCENTAGE, 
                GUBUN, 
                GNR_BOD_SUM, 
                GNR_TN_SUM, 
                GNR_TP_SUM, 
                OUT_BOD_SUM, 
                OUT_TN_SUM, 
                OUT_TP_SUM 
         FROM   (SELECT '1'      AS NO, 
                        '소계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        PERCENTAGE, 
                        GNR_BOD_SUM, 
                        GNR_TN_SUM, 
                        GNR_TP_SUM, 
                        OUT_BOD_SUM, 
                        OUT_TN_SUM, 
                        OUT_TP_SUM 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '2'         AS NO, 
                        '생활계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        PERCENTAGE, 
                        GNR_BOD_POP, 
                        GNR_TN_POP, 
                        GNR_TP_POP, 
                        OUT_BOD_POP, 
                        OUT_TN_POP, 
                        OUT_TP_POP 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '3'         AS NO, 
                        '축산계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        PERCENTAGE, 
                        GNR_BOD_ANI, 
                        GNR_TN_ANI, 
                        GNR_TP_ANI, 
                        OUT_BOD_ANI, 
                        OUT_TN_ANI, 
                        OUT_TP_ANI 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '4'         AS NO, 
                        '산업계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        PERCENTAGE, 
                        GNR_BOD_IND, 
                        GNR_TN_IND, 
                        GNR_TP_IND, 
                        OUT_BOD_IND, 
                        OUT_TN_IND, 
                        OUT_TP_IND 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '5'         AS NO, 
                        '토지계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        PERCENTAGE, 
                        GNR_BOD_LAND, 
                        GNR_TN_LAND, 
                        GNR_TP_LAND, 
                        OUT_BOD_LAND, 
                        OUT_TN_LAND, 
                        OUT_TP_LAND 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '6'         AS NO, 
                        '양식계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        PERCENTAGE, 
                        GNR_BOD_FISH, 
                        GNR_TN_FISH, 
                        GNR_TP_FISH, 
                        OUT_BOD_FISH, 
                        OUT_TN_FISH, 
                        OUT_TP_FISH 
                 FROM   POLLULANT_LOAD_FOR_CAT 
                 UNION 
                 SELECT '7'         AS NO, 
                        '매립계' AS GUBUN, 
                        WS_NM, 
                        WS_CD, 
                        AM_NM, 
                        AM_CD, 
                        SW_NAME, 
                        SW_CODE, 
                        DO_NM, 
                        CTY_NM, 
                        DONG_NM, 
                        RI_NM, 
                        ADM_CD, 
                        CAT_DID, 
                        PERCENTAGE, 
                        GNR_BOD_LANDFILL, 
                        GNR_TN_LANDFILL, 
                        GNR_TP_LANDFILL, 
                        OUT_BOD_LANDFILL, 
                        OUT_TN_LANDFILL, 
                        OUT_TP_LANDFILL 
                 FROM   POLLULANT_LOAD_FOR_CAT) 
         WHERE  CAT_DID IN <foreach collection="siteIds" item="item" separator="," open="(" close=")"> #{item}</foreach>	 
         ORDER  BY WS_CD, 
                   SW_CODE, 
                   CAT_DID, 
                   ADM_CD, 
                   NO) 
SELECT WS_NM, 
       AM_NM, 
       SW_NAME, 
       CAT_DID, 
       ADDR, 
       PERCENTAGE, 
       GUBUN, 
       GNR_BOD_SUM, 
       GNR_TN_SUM, 
       GNR_TP_SUM, 
       OUT_BOD_SUM, 
       OUT_TN_SUM, 
       OUT_TP_SUM 
FROM   (SELECT '1'              AS NO_1, 
               NO               AS NO_2, 
               ''               AS WS_CD, 
               ''               AS SW_CODE, 
               ''               AS ADM_CD, 
               ''               AS WS_NM, 
               ''               AS AM_NM, 
               ''               AS SW_NAME, 
               ''               AS CAT_DID, 
               '총계'         AS ADDR, 
               TO_NUMBER('')    AS PERCENTAGE, 
               GUBUN, 
               SUM(GNR_BOD_SUM) AS GNR_BOD_SUM, 
               SUM(GNR_TN_SUM)  AS GNR_TN_SUM, 
               SUM(GNR_TP_SUM)  AS GNR_TP_SUM, 
               SUM(OUT_BOD_SUM) AS OUT_BOD_SUM, 
               SUM(OUT_TN_SUM)  AS OUT_TN_SUM, 
               SUM(OUT_TP_SUM)  AS OUT_TP_SUM 
        FROM   POLLULANT_LOAD_FOR_CAT_TBL 
        WHERE  1 = 1 
        GROUP  BY GUBUN, 
                  NO 
        UNION 
        SELECT '2', 
               A.NO, 
               WS_CD, 
               SW_CODE, 
               ADM_CD, 
               WS_NM, 
               AM_NM, 
               SW_NAME, 
               CAT_DID, 
               ADDR, 
               PERCENTAGE, 
               GUBUN, 
               GNR_BOD_SUM, 
               GNR_TN_SUM, 
               GNR_TP_SUM, 
               OUT_BOD_SUM, 
               OUT_TN_SUM, 
               OUT_TP_SUM 
        FROM   POLLULANT_LOAD_FOR_CAT_TBL A) 
ORDER  BY NO_1, 
          WS_CD, 
          SW_CODE, 
          CAT_DID, 
          ADM_CD, 
          NO_2 
	
</select>

</mapper>